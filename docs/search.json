[{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"More Diagnostics for Projection Pursuit Indices","text":"vignette presents workflow built around functions: data_gen(), noise_gen(), ppi_mean(), ppi_scale(), ppi_noise_threshold() ppi_samplesize_effect()","code":"library(tidyverse) library(spinebil) library(tourr)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"More Diagnostics for Projection Pursuit Indices","text":"","code":"library(tidyverse) library(spinebil) library(tourr)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"generating-synthetic-structures-and-noise","dir":"Articles","previous_headings":"","what":"1) Generating Synthetic Structures and Noise","title":"More Diagnostics for Projection Pursuit Indices","text":"data_gen(); generate structured 2D point sets (e.g., sine, circle, cluster) orthogonal polynomial features benchmarking/visualisation. Structures (type like \"sine\", \"circle\", …) return tibble columns x, y, structure. Polynomial (type = \"polynomial\") returns n × degree matrix orthogonal polynomial basis vectors [0,1]. noise_gen(); generates numeric vector noise values (tibble value type) distributions : \"gaussian\", \"uniform\", \"lognormal\", \"t_distributed\", \"cauchy\", \"beta_noise\", \"exponential\", \"microstructure\". ’ll preview available structures, create simple polynomial features, sample noise types, combine structure + noise. type: \"linear\", \"sine\", \"circle\", \"cluster\", \"snake\", \"outliers\", \"sparse\", \"clumpy\", \"skewed\", \"striated\", \"concave\", \"monotonic\", \"doughnut\", \"\", \"polynomial\". n: number points/samples. degree: \"polynomial\"; number basis columns. seed: optional seed reproducibility. n: number noise samples. type: distribution name ( \"gaussian\", \"uniform\", \"lognormal\", \"t_distributed\", \"cauchy\", \"beta_noise\", \"exponential\", \"microstructure\"). level: scale/strength noise. seed: optional seed.   simple example, let’s take clean sine wave add Gaussian noise y.  data_gen(\"polynomial\", ...) returns n × degree matrix. data_gen(<type>, ...) return tibble columns x, y, structure. noise_gen(...) returns tibble columns value (numeric) type (factor/character).","code":"data_gen(type = \"all\", n = 500, degree = NULL, seed = NULL) noise_gen(n = 500, type = \"gaussian\", level = 0.1, seed = NULL) # One structure df_sine <- data_gen(\"sine\", n = 400, seed = 1)  # Multiple structures at once df_all  <- data_gen(\"all\",  n = 400, seed = 1) ggplot(df_all, aes(x, y)) +   geom_point(alpha = 0.6, size = 0.6) +   facet_wrap(~ structure, scales = \"free\") +   labs(title = \"Synthetic 2D Structures from data_gen()\",        subtitle = \"Each panel generated with n = 400\") # Generate a 4-degree orthogonal polynomial basis dPoly <- data_gen(\"polynomial\", n = 200, degree = 4, seed = 1)  ggplot(dPoly, aes(x = dPoly[,1] , y = dPoly[,2])) +   geom_point(alpha = 0.7) +    xlab(\"polynomial degree 1\") +   ylab(\"polynomial degree 2\") eps_g <- noise_gen(n = 500, type = \"gaussian\",   level = 0.06, seed = 340) eps_t <- noise_gen(n = 500, type = \"t_distributed\", level = 0.15, seed = 341) eps_cau <- noise_gen(n = 500, type = \"cauchy\",     level = 0.04, seed = 342) set.seed(345) n <- 500 sine_clean <- data_gen(\"sine\", n = n) |> mutate(y = sin(x))   # Noise to add on y eps <- noise_gen(n = n, type = \"gaussian\", level = 0.06, seed = 123)$value sine_noisy <- sine_clean |> mutate(y = y + eps)  bind_rows(   sine_clean  |> mutate(which = \"clean\"),   sine_noisy  |> mutate(which = \"noisy (gaussian, level = 0.06)\") ) |>   ggplot(aes(x, y, color = which)) +   geom_point(alpha = 0.6, size = 0.6) +   labs(title = \"Sine Structure with and without Added Noise\",        color = NULL)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"function-usage","dir":"Articles","previous_headings":"","what":"Function usage","title":"More Diagnostics for Projection Pursuit Indices","text":"type: \"linear\", \"sine\", \"circle\", \"cluster\", \"snake\", \"outliers\", \"sparse\", \"clumpy\", \"skewed\", \"striated\", \"concave\", \"monotonic\", \"doughnut\", \"\", \"polynomial\". n: number points/samples. degree: \"polynomial\"; number basis columns. seed: optional seed reproducibility. n: number noise samples. type: distribution name ( \"gaussian\", \"uniform\", \"lognormal\", \"t_distributed\", \"cauchy\", \"beta_noise\", \"exponential\", \"microstructure\"). level: scale/strength noise. seed: optional seed.","code":"data_gen(type = \"all\", n = 500, degree = NULL, seed = NULL) noise_gen(n = 500, type = \"gaussian\", level = 0.1, seed = NULL)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example usage","title":"More Diagnostics for Projection Pursuit Indices","text":"","code":"# One structure df_sine <- data_gen(\"sine\", n = 400, seed = 1)  # Multiple structures at once df_all  <- data_gen(\"all\",  n = 400, seed = 1) ggplot(df_all, aes(x, y)) +   geom_point(alpha = 0.6, size = 0.6) +   facet_wrap(~ structure, scales = \"free\") +   labs(title = \"Synthetic 2D Structures from data_gen()\",        subtitle = \"Each panel generated with n = 400\") # Generate a 4-degree orthogonal polynomial basis dPoly <- data_gen(\"polynomial\", n = 200, degree = 4, seed = 1)  ggplot(dPoly, aes(x = dPoly[,1] , y = dPoly[,2])) +   geom_point(alpha = 0.7) +    xlab(\"polynomial degree 1\") +   ylab(\"polynomial degree 2\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"preview-all-structures","dir":"Articles","previous_headings":"","what":"Preview all structures","title":"More Diagnostics for Projection Pursuit Indices","text":"","code":"ggplot(df_all, aes(x, y)) +   geom_point(alpha = 0.6, size = 0.6) +   facet_wrap(~ structure, scales = \"free\") +   labs(title = \"Synthetic 2D Structures from data_gen()\",        subtitle = \"Each panel generated with n = 400\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"polynomial-features-type-polynomial","dir":"Articles","previous_headings":"","what":"Polynomial features (type = \"polynomial\")","title":"More Diagnostics for Projection Pursuit Indices","text":"","code":"# Generate a 4-degree orthogonal polynomial basis dPoly <- data_gen(\"polynomial\", n = 200, degree = 4, seed = 1)  ggplot(dPoly, aes(x = dPoly[,1] , y = dPoly[,2])) +   geom_point(alpha = 0.7) +    xlab(\"polynomial degree 1\") +   ylab(\"polynomial degree 2\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"noise_gen-noise-distributions","dir":"Articles","previous_headings":"","what":"noise_gen(): noise distributions","title":"More Diagnostics for Projection Pursuit Indices","text":"","code":"eps_g <- noise_gen(n = 500, type = \"gaussian\",   level = 0.06, seed = 340) eps_t <- noise_gen(n = 500, type = \"t_distributed\", level = 0.15, seed = 341) eps_cau <- noise_gen(n = 500, type = \"cauchy\",     level = 0.04, seed = 342)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"combining-structure-noise","dir":"Articles","previous_headings":"","what":"Combining structure + noise","title":"More Diagnostics for Projection Pursuit Indices","text":"simple example, let’s take clean sine wave add Gaussian noise y.","code":"set.seed(345) n <- 500 sine_clean <- data_gen(\"sine\", n = n) |> mutate(y = sin(x))   # Noise to add on y eps <- noise_gen(n = n, type = \"gaussian\", level = 0.06, seed = 123)$value sine_noisy <- sine_clean |> mutate(y = y + eps)  bind_rows(   sine_clean  |> mutate(which = \"clean\"),   sine_noisy  |> mutate(which = \"noisy (gaussian, level = 0.06)\") ) |>   ggplot(aes(x, y, color = which)) +   geom_point(alpha = 0.6, size = 0.6) +   labs(title = \"Sine Structure with and without Added Noise\",        color = NULL)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"return-value","dir":"Articles","previous_headings":"","what":"Return value","title":"More Diagnostics for Projection Pursuit Indices","text":"data_gen(\"polynomial\", ...) returns n × degree matrix. data_gen(<type>, ...) return tibble columns x, y, structure. noise_gen(...) returns tibble columns value (numeric) type (factor/character).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"finding-projection-pursuit-index-mean","dir":"Articles","previous_headings":"","what":"2) Finding Projection Pursuit Index Mean","title":"More Diagnostics for Projection Pursuit Indices","text":"ppi_mean() simulates summarizes projection pursuit index (PPI) 2D variable pairs dataset. pair, repeats index evaluation n_sim times (sampling n_obs observations time) returns mean index per pair. tibble one row per variable pair: var_i, var_j; names variables forming pair. mean_index; mean index across n_sim simulations pair.","code":"res <- ppi_mean(   data,        # data frame with ≥ 2 numeric columns   index_fun,   # function taking n×2 matrix and returning a numeric value   n_sim = 100,   n_obs = 300 ) data <- as.data.frame(data_gen(type = \"polynomial\", degree = 2)) res  <- ppi_mean(data, scagIndex(\"stringy\"), n_sim = 5) res #> # A tibble: 1 × 3 #>   var_i var_j mean_index #>   <chr> <chr>      <dbl> #> 1 1     2              1"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"function-usage-1","dir":"Articles","previous_headings":"","what":"Function usage","title":"More Diagnostics for Projection Pursuit Indices","text":"","code":"res <- ppi_mean(   data,        # data frame with ≥ 2 numeric columns   index_fun,   # function taking n×2 matrix and returning a numeric value   n_sim = 100,   n_obs = 300 )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"example-usage-1","dir":"Articles","previous_headings":"","what":"Example Usage","title":"More Diagnostics for Projection Pursuit Indices","text":"","code":"data <- as.data.frame(data_gen(type = \"polynomial\", degree = 2)) res  <- ppi_mean(data, scagIndex(\"stringy\"), n_sim = 5) res #> # A tibble: 1 × 3 #>   var_i var_j mean_index #>   <chr> <chr>      <dbl> #> 1 1     2              1"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"return-value-1","dir":"Articles","previous_headings":"","what":"Return value","title":"More Diagnostics for Projection Pursuit Indices","text":"tibble one row per variable pair: var_i, var_j; names variables forming pair. mean_index; mean index across n_sim simulations pair.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"comparing-index-scale-on-structured-vs--noisy-data","dir":"Articles","previous_headings":"","what":"3) Comparing Index Scale on Structured vs. Noisy Data","title":"More Diagnostics for Projection Pursuit Indices","text":"ppi_scale() runs simulations compare projection pursuit index (PPI) : Structured dataset (input), Pure Gaussian noise (sample size). every pair variables across many simulations, records index values cases can see scale separation index structure noise.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"function-usage-2","dir":"Articles","previous_headings":"","what":"Function Usage","title":"More Diagnostics for Projection Pursuit Indices","text":"Inputs: data — data frame/tibble/matrix; (>= 2 numeric columns). index_fun — function: takes 2-column matrix returns numeric scalar (e.g., scagIndex(\"stringy\")). n_sim — number simulations. n_obs — number observations. seed — optional seed reproducibility.","code":"ppi_scale(   data,           index_fun,    n_sim = 100,   n_obs = 500,   seed = NULL )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"example-usage-2","dir":"Articles","previous_headings":"","what":"Example usage","title":"More Diagnostics for Projection Pursuit Indices","text":"Let’s evaluate stringy index cassowaryr package see scale change pure noise structure. sigma = 0 structured sigma = 1 pure noise.","code":"res <- ppi_scale(data_gen(\"polynomial\", degree = 3), scagIndex(\"stringy\"), n_sim = 3)  head(res) #> # A tibble: 6 × 6 #>   simulation var_i var_j var_pair sigma index #>        <int> <chr> <chr> <chr>    <dbl> <dbl> #> 1          1 1     2     1-2          0 1     #> 2          1 1     2     1-2          1 0.732 #> 3          1 1     3     1-3          0 1     #> 4          1 1     3     1-3          1 0.783 #> 5          1 2     3     2-3          0 0.996 #> 6          1 2     3     2-3          1 0.719 res %>%   mutate(sigma = factor(sigma, levels = c(0,1), labels = c(\"structured\",\"noise\"))) %>%   ggplot(aes(x = sigma, y = index, fill = sigma)) +   geom_boxplot() +   facet_wrap(~ var_pair, scales = \"free_y\") +   labs(     title = \"Index scale on structured vs noisy data\",     x = NULL, y = \"index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"boxplots-structured-vs-noise-per-variable-pair","dir":"Articles","previous_headings":"","what":"Boxplots: structured vs noise per variable pair","title":"More Diagnostics for Projection Pursuit Indices","text":"","code":"res %>%   mutate(sigma = factor(sigma, levels = c(0,1), labels = c(\"structured\",\"noise\"))) %>%   ggplot(aes(x = sigma, y = index, fill = sigma)) +   geom_boxplot() +   facet_wrap(~ var_pair, scales = \"free_y\") +   labs(     title = \"Index scale on structured vs noisy data\",     x = NULL, y = \"index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"return-value-2","dir":"Articles","previous_headings":"","what":"Return value","title":"More Diagnostics for Projection Pursuit Indices","text":"ppi_scale() returns tibble columns: simulation: simulation index var_i, var_j: two variable names var_pair: \"var_i-var_j\" compact label. Structured value (sigma = 0); compute index actual pair. Noise value (sigma = 1); generate n_obs standard-normal x, y, scale mean 0 / sd 1, compute index. index: index value index_fun.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"estimating-a-noise-threshold-for-projectionpursuit-indices","dir":"Articles","previous_headings":"","what":"4) Estimating a Noise Threshold for Projection–Pursuit Indices","title":"More Diagnostics for Projection Pursuit Indices","text":"ppi_noise_threshold() estimates 95th percentile projection pursuit index (PPI) synthetic noise. gives null threshold: observed index real data exceeds value, may indicate non-random structure. function supports different noise types via noise_gen() (e.g., Gaussian, tt-distributed, Cauchy, microstructure) lets set number simulations sample size per simulation.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"function-usage-3","dir":"Articles","previous_headings":"","what":"Function usage","title":"More Diagnostics for Projection Pursuit Indices","text":"Inputs : index_fun: function returns single numeric value. n_sim: number simulations. n_obs: sample size per simulation. noise_type / noise_level: passed noise_gen() control distribution scale. seed: reproducibility.","code":"ppi_noise_threshold(   index_fun,   n_sim = 100,   n_obs = 500,   noise_type  = \"gaussian\",   noise_level = 0.01,   seed = NULL )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"example-usage-3","dir":"Articles","previous_headings":"","what":"Example Usage","title":"More Diagnostics for Projection Pursuit Indices","text":"","code":"thr <- ppi_noise_threshold(   index_fun   = scagIndex(\"stringy\"),   noise_type  = \"cauchy\",   noise_level = 0.1,   n_sim       = 10,   n_obs       = 100 ) thr #>       95%  #> 0.7865055"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"return-value-3","dir":"Articles","previous_headings":"","what":"Return value","title":"More Diagnostics for Projection Pursuit Indices","text":"ppi_noise_threshold() returns single numeric: estimated 95th percentile index specified noise model.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"sample-size-effects-for-projection-pursuit-indexes-under-gaussian-noise","dir":"Articles","previous_headings":"","what":"5) Sample-Size Effects for Projection Pursuit Indexes under Gaussian Noise","title":"More Diagnostics for Projection Pursuit Indices","text":"demonstrates use ppi_samplesize_effect() function study projection pursuit index (PPI) values behave increasing sample sizes purely noisy (Gaussian) data. size, computes specified index function samples records 95th percentile index values observed. helps estimate distributional behavior index pure noise, depending sample size. curves useful null reference: -curve values may indicate non-random structure.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"function-usage-4","dir":"Articles","previous_headings":"","what":"Function Usage","title":"More Diagnostics for Projection Pursuit Indices","text":"index_fun: function accepts data one simulation returns single numeric index value. n_sim: number simulations per sample size (default 100). Internally, function evaluates grid sample sizes 30 2000 (denser small sizes), simulates n_sim draws , returns 95th percentile resulting index values.","code":"ppi_samplesize_effect(index_fun, n_sim = 100)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"example-usage-4","dir":"Articles","previous_headings":"","what":"Example Usage","title":"More Diagnostics for Projection Pursuit Indices","text":"Let’s evaluate stringy index cassowaryr package see values change noise sample size increases.","code":"result <- ppi_samplesize_effect(scagIndex(\"stringy\"), n_sim = 4) head(result) #> # A tibble: 6 × 2 #>   SampleSize Percentile95 #>        <dbl>        <dbl> #> 1         30        0.816 #> 2         35        0.752 #> 3         40        0.832 #> 4         45        0.758 #> 5         50        0.815 #> 6         55        0.800 tail(result) #> # A tibble: 6 × 2 #>   SampleSize Percentile95 #>        <dbl>        <dbl> #> 1       1875        0.739 #> 2       1900        0.744 #> 3       1925        0.736 #> 4       1950        0.737 #> 5       1975        0.731 #> 6       2000        0.736 ggplot(result, aes(SampleSize, Percentile95)) +   geom_point(alpha = 0.7, size = 1) +   geom_smooth(se = FALSE, method = \"loess\", formula = y ~ x, span = 0.1) +   labs(     x = \"Sample size (n)\",     y = \"95th percentile of index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"plot-the-95th-percentile","dir":"Articles","previous_headings":"","what":"Plot the 95th-percentile","title":"More Diagnostics for Projection Pursuit Indices","text":"","code":"ggplot(result, aes(SampleSize, Percentile95)) +   geom_point(alpha = 0.7, size = 1) +   geom_smooth(se = FALSE, method = \"loess\", formula = y ~ x, span = 0.1) +   labs(     x = \"Sample size (n)\",     y = \"95th percentile of index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/diagnosePPI.html","id":"return-value-4","dir":"Articles","previous_headings":"","what":"Return value","title":"More Diagnostics for Projection Pursuit Indices","text":"ppi_samplesize_effect() returns tibble: SampleSize: sample size block simulations Percentile95: empirical 95th percentile index across n_sim simulations size.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexMean.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Simulate and Summarize Projection Pursuit Index (PPI) Means","text":"ppi_mean() simulates summarizes projection pursuit index (PPI) 2D variable pairs dataset. pair, repeats index evaluation n_sim times (sampling n_obs observations time) returns mean index per pair.","code":"library(spinebil)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexMean.html","id":"what-the-function-does","dir":"Articles","previous_headings":"","what":"What the Function Does","title":"Simulate and Summarize Projection Pursuit Index (PPI) Means","text":"ppi_mean(data, index_fun, n_sim = 100, n_obs = 300) Builds 2-column variable pairs data. simulation (1,…,n_sim) pair (x, y), computes index via index_fun. Aggregates mean index per pair.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexMean.html","id":"function-usage","dir":"Articles","previous_headings":"","what":"Function usage","title":"Simulate and Summarize Projection Pursuit Index (PPI) Means","text":"","code":"res <- ppi_mean(   data,        # data frame with ≥ 2 numeric columns   index_fun,   #function taking n×2 matrix and returning a numeric value   n_sim = 100,   n_obs = 300 )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexMean.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Simulate and Summarize Projection Pursuit Index (PPI) Means","text":"","code":"data <- as.data.frame(data_gen(type = \"polynomial\", degree = 2)) res  <- ppi_mean(data, scagIndex(\"stringy\"), n_sim = 5) res #> # A tibble: 1 × 3 #>   var_i var_j mean_index #>   <chr> <chr>      <dbl> #> 1 1     2              1"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexMean.html","id":"return-value","dir":"Articles","previous_headings":"","what":"Return value","title":"Simulate and Summarize Projection Pursuit Index (PPI) Means","text":"tibble one row per variable pair: var_i, var_j — names variables forming pair. mean_index — mean index across n_sim simulations pair.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexNoiseThreshold.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Estimating a Noise Threshold for Projection–Pursuit Indices","text":"ppi_noise_threshold() estimates 95th percentile projection pursuit index (PPI) synthetic noise. gives null threshold: observed index real data exceeds value, may indicate non-random structure. function supports different noise types via noise_gen() (e.g., Gaussian, tt-distributed, Cauchy, microstructure) lets set number simulations sample size per simulation.","code":"library(tidyverse) library(spinebil)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexNoiseThreshold.html","id":"what-the-function-does","dir":"Articles","previous_headings":"","what":"What the Function Does","title":"Estimating a Noise Threshold for Projection–Pursuit Indices","text":"ppi_noise_threshold(index_fun, n_sim = 100, n_obs = 500, noise_type = \"gaussian\", noise_level = 0.01, seed = NULL) Generates noise pairs (x, y) repeatedly (n_sim times), length n_obs, using noise_gen(type = noise_type, level = noise_level). Computes index every simulated pair via index_fun. Returns 95th percentile (quantile(..., 0.95)) simulated index values.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexNoiseThreshold.html","id":"function-usage","dir":"Articles","previous_headings":"","what":"Function usage","title":"Estimating a Noise Threshold for Projection–Pursuit Indices","text":"Arguments : index_fun: function returns single numeric value. n_sim: number simulations. n_obs: sample size per simulation. noise_type / noise_level: passed noise_gen() control distribution scale. seed: reproducibility.","code":"ppi_noise_threshold(   index_fun,   n_sim = 100,   n_obs = 500,   noise_type  = \"gaussian\",   noise_level = 0.01,   seed = NULL )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexNoiseThreshold.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Estimating a Noise Threshold for Projection–Pursuit Indices","text":"","code":"thr <- ppi_noise_threshold(   index_fun   = scagIndex(\"stringy\"),   noise_type  = \"cauchy\",   noise_level = 0.1,   n_sim       = 10,   n_obs       = 100 ) thr #>       95%  #> 0.7483209"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexNoiseThreshold.html","id":"return-value","dir":"Articles","previous_headings":"","what":"Return value","title":"Estimating a Noise Threshold for Projection–Pursuit Indices","text":"ppi_noise_threshold() returns single numeric: estimated 95th percentile index specified noise model.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexScale.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Comparing Index Scale on Structured vs. Noisy Data","text":"ppi_scale() runs simulations compare projection pursuit index (PPI) : Structured dataset (input), Pure Gaussian noise (sample size). every pair variables across many simulations, records index values cases can see scale separation index structure noise.","code":"library(spinebil)  library(tidyverse)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexScale.html","id":"what-the-function-does","dir":"Articles","previous_headings":"","what":"What the Function Does","title":"Comparing Index Scale on Structured vs. Noisy Data","text":"Pairs: builds 2D variable pairs data. Simulations: simulation 1,...,n_sim pair: Structured value (sigma = 0) — compute index actual pair. Noise value (sigma = 1) — generate n_obs standard-normal x, y, scale mean 0 / sd 1, compute index. Output: tidy table simulation id, variable pair, sigma ∈ {0,1}, index value.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexScale.html","id":"ppi_scaledata-index_fun-n_sim-100-n_obs-500-seed-null","dir":"Articles","previous_headings":"","what":"ppi_scale(data, index_fun, n_sim = 100, n_obs = 500, seed = NULL)","title":"Comparing Index Scale on Structured vs. Noisy Data","text":"Pairs: builds 2D variable pairs data. Simulations: simulation 1,...,n_sim pair: Structured value (sigma = 0) — compute index actual pair. Noise value (sigma = 1) — generate n_obs standard-normal x, y, scale mean 0 / sd 1, compute index. Output: tidy table simulation id, variable pair, sigma ∈ {0,1}, index value.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexScale.html","id":"function-usage","dir":"Articles","previous_headings":"","what":"Function usage","title":"Comparing Index Scale on Structured vs. Noisy Data","text":"Arguments: data — data frame/tibble/matrix; (>= 2 numeric columns). index_fun — function: takes 2-column matrix returns numeric scalar (e.g., scagIndex(\"stringy\")). n_sim — number simulations. n_obs — number observations. seed — optional seed reproducibility.","code":"ppi_scale(   data,           index_fun,    n_sim = 100,   n_obs = 500,   seed = NULL )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexScale.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example usage","title":"Comparing Index Scale on Structured vs. Noisy Data","text":"Let’s evaluate stringy index cassowaryr package see scale change pure noise structure. sigma = 0 structured sigma = 1 pure noise.","code":"res <- ppi_scale(data_gen(\"polynomial\", degree = 3), scagIndex(\"stringy\"), n_sim = 3)  head(res) #> # A tibble: 6 × 6 #>   simulation var_i var_j var_pair sigma index #>        <int> <chr> <chr> <chr>    <dbl> <dbl> #> 1          1 1     2     1-2          0 1     #> 2          1 1     2     1-2          1 0.739 #> 3          1 1     3     1-3          0 1     #> 4          1 1     3     1-3          1 0.732 #> 5          1 2     3     2-3          0 0.996 #> 6          1 2     3     2-3          1 0.735 res %>%   mutate(sigma = factor(sigma, levels = c(0,1), labels = c(\"structured\",\"noise\"))) %>%   ggplot(aes(x = sigma, y = index, fill = sigma)) +   geom_boxplot() +   facet_wrap(~ var_pair, scales = \"free_y\") +   labs(     title = \"Index scale on structured vs noisy data\",     x = NULL, y = \"index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexScale.html","id":"boxplots-structured-vs-noise-per-variable-pair","dir":"Articles","previous_headings":"","what":"Boxplots: structured vs noise per variable pair","title":"Comparing Index Scale on Structured vs. Noisy Data","text":"","code":"res %>%   mutate(sigma = factor(sigma, levels = c(0,1), labels = c(\"structured\",\"noise\"))) %>%   ggplot(aes(x = sigma, y = index, fill = sigma)) +   geom_boxplot() +   facet_wrap(~ var_pair, scales = \"free_y\") +   labs(     title = \"Index scale on structured vs noisy data\",     x = NULL, y = \"index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/indexScale.html","id":"return-value","dir":"Articles","previous_headings":"","what":"Return value","title":"Comparing Index Scale on Structured vs. Noisy Data","text":"ppi_scale() returns tibble columns: simulation: simulation index var_i, var_j: two variable names var_pair: \"var_i-var_j\" compact label. sigma: 0 = structured, 1 = noise index: index value index_fun","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"vignette presents workflow built around functions: data_gen(), noise_gen(), ppi_mean(), ppi_scale(), ppi_noise_threshold() ppi_samplesize_effect().","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"generating-synthetic-structures-and-noise","dir":"Articles","previous_headings":"","what":"1) Generating Synthetic Structures and Noise","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"data_gen(); generate structured 2D point sets (e.g., sine, circle, cluster) orthogonal polynomial features benchmarking/visualisation. Structures (type like \"sine\", \"circle\", …) return tibble columns x, y, structure. Polynomial (type = \"polynomial\") returns n × degree matrix orthogonal polynomial basis vectors [0,1]. noise_gen(); generates numeric vector noise values (tibble value type) distributions : \"gaussian\", \"uniform\", \"lognormal\", \"t_distributed\", \"cauchy\", \"beta_noise\", \"exponential\", \"microstructure\". ’ll preview available structures, create simple polynomial features, sample noise types, combine structure + noise. type: \"linear\", \"sine\", \"circle\", \"cluster\", \"snake\", \"outliers\", \"sparse\", \"clumpy\", \"skewed\", \"striated\", \"concave\", \"monotonic\", \"doughnut\", \"\", \"polynomial\". n: number points/samples. degree: \"polynomial\"; number basis columns. seed: optional seed reproducibility. n: number noise samples. type: distribution name ( \"gaussian\", \"uniform\", \"lognormal\", \"t_distributed\", \"cauchy\", \"beta_noise\", \"exponential\", \"microstructure\"). level: scale/strength noise. seed: optional seed.   simple example, let’s take clean sine wave add Gaussian noise y.  data_gen(\"polynomial\", ...) returns n × degree matrix. data_gen(<type>, ...) return tibble columns x, y, structure. noise_gen(...) returns tibble columns value (numeric) type (factor/character).","code":"data_gen(type = \"all\", n = 500, degree = NULL, seed = NULL) noise_gen(n = 500, type = \"gaussian\", level = 0.1, seed = NULL) # One structure df_sine <- spinebil::data_gen(\"sine\", n = 400, seed = 1)  # Multiple structures at once df_all <- spinebil::data_gen(\"all\", n = 400, seed = 1) ggplot2::ggplot(df_all, ggplot2::aes(x, y)) +   ggplot2::geom_point(alpha = 0.6, size = 0.6) +   ggplot2::facet_wrap(~structure) +   ggplot2::labs(     title = \"Synthetic 2D Structures from dataGen()\",     subtitle = \"Each panel generated with n = 400\"   ) +   ggplot2::xlim(-1.5, 1.5) +   ggplot2::ylim(-1.5, 1.5) +   ggplot2::theme(     aspect.ratio = 1,     axis.text = ggplot2::element_blank(),     axis.title = ggplot2::element_blank(),     axis.ticks = ggplot2::element_blank()   ) # Generate a 4-degree orthogonal polynomial basis dPoly <- spinebil::data_gen(\"polynomial\", n = 200, degree = 4, seed = 1)  ggplot2::ggplot(dPoly, ggplot2::aes(x = dPoly[, 1], y = dPoly[, 2])) +   ggplot2::geom_point(alpha = 0.7) +   ggplot2::xlab(\"polynomial degree 1\") +   ggplot2::ylab(\"polynomial degree 2\") +   ggplot2::theme(     aspect.ratio = 1,     axis.text = ggplot2::element_blank(),     axis.ticks = ggplot2::element_blank()   ) eps_g <- spinebil::noise_gen(n = 500, type = \"gaussian\", level = 0.06, seed = 340) eps_t <- spinebil::noise_gen(n = 500, type = \"t_distributed\", level = 0.15, seed = 341) eps_cau <- spinebil::noise_gen(n = 500, type = \"cauchy\", level = 0.04, seed = 342) set.seed(345) n <- 500 sine_clean <- spinebil::data_gen(\"sine\", n = n) |> dplyr::mutate(y = sin(x))  # Noise to add on y eps <- spinebil::noise_gen(n = n, type = \"gaussian\", level = 0.06, seed = 123)$value sine_noisy <- sine_clean |> dplyr::mutate(y = y + eps)  dplyr::bind_rows(   sine_clean |> dplyr::mutate(which = \"clean\"),   sine_noisy |> dplyr::mutate(which = \"noisy (gaussian, level = 0.06)\") ) |>   ggplot2::ggplot(ggplot2::aes(x, y, color = which)) +   ggplot2::geom_point(alpha = 0.6, size = 0.6) +   ggplot2::labs(     title = \"Sine Structure with and without Added Noise\",     color = NULL   ) +   ggplot2::theme(     axis.text = ggplot2::element_blank(),     axis.title = ggplot2::element_blank(),     axis.ticks = ggplot2::element_blank()   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"function-usage","dir":"Articles","previous_headings":"","what":"Function usage","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"type: \"linear\", \"sine\", \"circle\", \"cluster\", \"snake\", \"outliers\", \"sparse\", \"clumpy\", \"skewed\", \"striated\", \"concave\", \"monotonic\", \"doughnut\", \"\", \"polynomial\". n: number points/samples. degree: \"polynomial\"; number basis columns. seed: optional seed reproducibility. n: number noise samples. type: distribution name ( \"gaussian\", \"uniform\", \"lognormal\", \"t_distributed\", \"cauchy\", \"beta_noise\", \"exponential\", \"microstructure\"). level: scale/strength noise. seed: optional seed.","code":"data_gen(type = \"all\", n = 500, degree = NULL, seed = NULL) noise_gen(n = 500, type = \"gaussian\", level = 0.1, seed = NULL)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example usage","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"","code":"# One structure df_sine <- spinebil::data_gen(\"sine\", n = 400, seed = 1)  # Multiple structures at once df_all <- spinebil::data_gen(\"all\", n = 400, seed = 1) ggplot2::ggplot(df_all, ggplot2::aes(x, y)) +   ggplot2::geom_point(alpha = 0.6, size = 0.6) +   ggplot2::facet_wrap(~structure) +   ggplot2::labs(     title = \"Synthetic 2D Structures from dataGen()\",     subtitle = \"Each panel generated with n = 400\"   ) +   ggplot2::xlim(-1.5, 1.5) +   ggplot2::ylim(-1.5, 1.5) +   ggplot2::theme(     aspect.ratio = 1,     axis.text = ggplot2::element_blank(),     axis.title = ggplot2::element_blank(),     axis.ticks = ggplot2::element_blank()   ) # Generate a 4-degree orthogonal polynomial basis dPoly <- spinebil::data_gen(\"polynomial\", n = 200, degree = 4, seed = 1)  ggplot2::ggplot(dPoly, ggplot2::aes(x = dPoly[, 1], y = dPoly[, 2])) +   ggplot2::geom_point(alpha = 0.7) +   ggplot2::xlab(\"polynomial degree 1\") +   ggplot2::ylab(\"polynomial degree 2\") +   ggplot2::theme(     aspect.ratio = 1,     axis.text = ggplot2::element_blank(),     axis.ticks = ggplot2::element_blank()   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"preview-all-structures","dir":"Articles","previous_headings":"","what":"Preview all structures","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"","code":"ggplot2::ggplot(df_all, ggplot2::aes(x, y)) +   ggplot2::geom_point(alpha = 0.6, size = 0.6) +   ggplot2::facet_wrap(~structure) +   ggplot2::labs(     title = \"Synthetic 2D Structures from dataGen()\",     subtitle = \"Each panel generated with n = 400\"   ) +   ggplot2::xlim(-1.5, 1.5) +   ggplot2::ylim(-1.5, 1.5) +   ggplot2::theme(     aspect.ratio = 1,     axis.text = ggplot2::element_blank(),     axis.title = ggplot2::element_blank(),     axis.ticks = ggplot2::element_blank()   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"polynomial-features-type-polynomial","dir":"Articles","previous_headings":"","what":"Polynomial features (type = \"polynomial\")","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"","code":"# Generate a 4-degree orthogonal polynomial basis dPoly <- spinebil::data_gen(\"polynomial\", n = 200, degree = 4, seed = 1)  ggplot2::ggplot(dPoly, ggplot2::aes(x = dPoly[, 1], y = dPoly[, 2])) +   ggplot2::geom_point(alpha = 0.7) +   ggplot2::xlab(\"polynomial degree 1\") +   ggplot2::ylab(\"polynomial degree 2\") +   ggplot2::theme(     aspect.ratio = 1,     axis.text = ggplot2::element_blank(),     axis.ticks = ggplot2::element_blank()   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"noise_gen-noise-distributions","dir":"Articles","previous_headings":"","what":"noise_gen(): noise distributions","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"","code":"eps_g <- spinebil::noise_gen(n = 500, type = \"gaussian\", level = 0.06, seed = 340) eps_t <- spinebil::noise_gen(n = 500, type = \"t_distributed\", level = 0.15, seed = 341) eps_cau <- spinebil::noise_gen(n = 500, type = \"cauchy\", level = 0.04, seed = 342)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"combining-structure-noise","dir":"Articles","previous_headings":"","what":"Combining structure + noise","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"simple example, let’s take clean sine wave add Gaussian noise y.","code":"set.seed(345) n <- 500 sine_clean <- spinebil::data_gen(\"sine\", n = n) |> dplyr::mutate(y = sin(x))  # Noise to add on y eps <- spinebil::noise_gen(n = n, type = \"gaussian\", level = 0.06, seed = 123)$value sine_noisy <- sine_clean |> dplyr::mutate(y = y + eps)  dplyr::bind_rows(   sine_clean |> dplyr::mutate(which = \"clean\"),   sine_noisy |> dplyr::mutate(which = \"noisy (gaussian, level = 0.06)\") ) |>   ggplot2::ggplot(ggplot2::aes(x, y, color = which)) +   ggplot2::geom_point(alpha = 0.6, size = 0.6) +   ggplot2::labs(     title = \"Sine Structure with and without Added Noise\",     color = NULL   ) +   ggplot2::theme(     axis.text = ggplot2::element_blank(),     axis.title = ggplot2::element_blank(),     axis.ticks = ggplot2::element_blank()   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"return-value","dir":"Articles","previous_headings":"","what":"Return value","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"data_gen(\"polynomial\", ...) returns n × degree matrix. data_gen(<type>, ...) return tibble columns x, y, structure. noise_gen(...) returns tibble columns value (numeric) type (factor/character).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"finding-projection-pursuit-index-mean","dir":"Articles","previous_headings":"","what":"2) Finding Projection Pursuit Index Mean","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"ppi_mean() simulates summarizes projection pursuit index (PPI) 2D variable pairs dataset. pair, repeats index evaluation n_sim times (sampling n_obs observations time) returns mean index per pair. tibble one row per variable pair: var_i, var_j; names variables forming pair. mean_index; mean index across n_sim simulations pair.","code":"res <- ppi_mean(   data,        # data frame with ≥ 2 numeric columns   index_fun,   # function taking n×2 matrix and returning a numeric value   n_sim = 100,   n_obs = 300 ) data <- as.data.frame(spinebil::data_gen(type = \"polynomial\", degree = 2)) res <- spinebil::ppi_mean(data, spinebil::scag_index(\"stringy\"), n_sim = 5) res #> # A tibble: 1 × 3 #>   var_i var_j mean_index #>   <chr> <chr>      <dbl> #> 1 1     2              1"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"function-usage-1","dir":"Articles","previous_headings":"","what":"Function usage","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"","code":"res <- ppi_mean(   data,        # data frame with ≥ 2 numeric columns   index_fun,   # function taking n×2 matrix and returning a numeric value   n_sim = 100,   n_obs = 300 )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"example-usage-1","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"","code":"data <- as.data.frame(spinebil::data_gen(type = \"polynomial\", degree = 2)) res <- spinebil::ppi_mean(data, spinebil::scag_index(\"stringy\"), n_sim = 5) res #> # A tibble: 1 × 3 #>   var_i var_j mean_index #>   <chr> <chr>      <dbl> #> 1 1     2              1"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"return-value-1","dir":"Articles","previous_headings":"","what":"Return value","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"tibble one row per variable pair: var_i, var_j; names variables forming pair. mean_index; mean index across n_sim simulations pair.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"comparing-index-scale-on-structured-vs--noisy-data","dir":"Articles","previous_headings":"","what":"3) Comparing Index Scale on Structured vs. Noisy Data","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"ppi_scale() runs simulations compare projection pursuit index (PPI) : Structured dataset (input), Pure Gaussian noise (sample size). every pair variables across many simulations, records index values cases can see scale separation index structure noise.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"function-usage-2","dir":"Articles","previous_headings":"","what":"Function Usage","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"Inputs: data; data frame/tibble/matrix; (>= 2 numeric columns). index_fun; function: takes 2-column matrix returns numeric scalar (e.g., scag_index(\"stringy\")). n_sim; number simulations. n_obs; number observations. seed; optional seed reproducibility.","code":"ppi_scale(   data,           index_fun,    n_sim = 100,   n_obs = 500,   seed = NULL )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"example-usage-2","dir":"Articles","previous_headings":"","what":"Example usage","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"Let’s evaluate stringy index cassowaryr package see scale change pure noise structure. sigma = 0 structured sigma = 1 pure noise.","code":"res <- spinebil::ppi_scale(spinebil::data_gen(\"polynomial\", degree = 3), spinebil::scag_index(\"stringy\"), n_sim = 3)  head(res) #> # A tibble: 6 × 6 #>   simulation var_i var_j var_pair sigma index #>        <int> <chr> <chr> <chr>    <dbl> <dbl> #> 1          1 1     2     1-2          0 1     #> 2          1 1     2     1-2          1 0.732 #> 3          1 1     3     1-3          0 1     #> 4          1 1     3     1-3          1 0.783 #> 5          1 2     3     2-3          0 0.996 #> 6          1 2     3     2-3          1 0.719 res |>   dplyr::mutate(sigma = factor(sigma, levels = c(0, 1), labels = c(\"structured\", \"noise\"))) |>   ggplot2::ggplot(ggplot2::aes(x = sigma, y = index, fill = sigma)) +   ggplot2::geom_boxplot() +   ggplot2::facet_wrap(~var_pair) +   ggplot2::labs(     title = \"Index scale on structured vs noisy data\",     x = NULL, y = \"index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"boxplots-structured-vs-noise-per-variable-pair","dir":"Articles","previous_headings":"","what":"Boxplots: structured vs noise per variable pair","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"","code":"res |>   dplyr::mutate(sigma = factor(sigma, levels = c(0, 1), labels = c(\"structured\", \"noise\"))) |>   ggplot2::ggplot(ggplot2::aes(x = sigma, y = index, fill = sigma)) +   ggplot2::geom_boxplot() +   ggplot2::facet_wrap(~var_pair) +   ggplot2::labs(     title = \"Index scale on structured vs noisy data\",     x = NULL, y = \"index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"return-value-2","dir":"Articles","previous_headings":"","what":"Return value","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"ppi_scale() returns tibble columns: simulation: simulation index var_i, var_j: two variable names var_pair: \"var_i-var_j\" compact label. Structured value (sigma = 0); compute index actual pair. Noise value (sigma = 1); generate n_obs standard-normal x, y, scale mean 0 / sd 1, compute index. index: index value index_fun.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"estimating-a-noise-threshold-for-projection-pursuit-indices","dir":"Articles","previous_headings":"","what":"4) Estimating a Noise Threshold for Projection Pursuit Indices","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"ppi_noise_threshold() estimates 95th percentile projection pursuit index (PPI) synthetic noise. gives null threshold: observed index real data exceeds value, may indicate non-random structure. function supports different noise types via noise_gen() (e.g., Gaussian, tt-distributed, Cauchy, microstructure) lets set number simulations sample size per simulation.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"function-usage-3","dir":"Articles","previous_headings":"","what":"Function usage","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"Inputs : index_fun: function returns single numeric value. n_sim: number simulations. n_obs: sample size per simulation. noise_type / noise_level: passed noise_gen() control distribution scale. seed: reproducibility.","code":"ppi_noise_threshold(   index_fun,   n_sim = 100,   n_obs = 500,   noise_type  = \"gaussian\",   noise_level = 0.01,   seed = NULL )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"example-usage-3","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"","code":"thr <- spinebil::ppi_noise_threshold(   index_fun   = spinebil::scag_index(\"stringy\"),   noise_type  = \"cauchy\",   noise_level = 0.1,   n_sim       = 10,   n_obs       = 100 ) thr #>       95%  #> 0.7865055"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"return-value-3","dir":"Articles","previous_headings":"","what":"Return value","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"ppi_noise_threshold() returns single numeric: estimated 95th percentile index specified noise model.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"sample-size-effects-for-projection-pursuit-indices-under-gaussian-noise","dir":"Articles","previous_headings":"","what":"5) Sample-Size Effects for Projection Pursuit Indices under Gaussian Noise","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"demonstrates use ppi_samplesize_effect() function study projection pursuit index (PPI) values behave increasing sample sizes purely noisy (Gaussian) data. size, computes specified index function samples records 95th percentile index values observed. helps estimate distributional behavior index pure noise, depending sample size. curves useful null reference: -curve values may indicate non-random structure.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"function-usage-4","dir":"Articles","previous_headings":"","what":"Function Usage","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"index_fun: function accepts data one simulation returns single numeric index value. n_sim: number simulations per sample size (default 100). Internally, function evaluates grid sample sizes 30 2000 (denser small sizes), simulates n_sim draws , returns 95th percentile resulting index values.","code":"ppi_samplesize_effect(index_fun, n_sim = 100)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"example-usage-4","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"Let’s evaluate stringy index cassowaryr package see values change noise sample size increases.","code":"result <- spinebil::ppi_samplesize_effect(spinebil::scag_index(\"stringy\"), n_sim = 4) head(result) #> # A tibble: 6 × 2 #>   sample_size percentile95 #>         <dbl>        <dbl> #> 1          30        0.816 #> 2          35        0.752 #> 3          40        0.832 #> 4          45        0.758 #> 5          50        0.815 #> 6          55        0.800 tail(result) #> # A tibble: 6 × 2 #>   sample_size percentile95 #>         <dbl>        <dbl> #> 1        1875        0.739 #> 2        1900        0.744 #> 3        1925        0.736 #> 4        1950        0.737 #> 5        1975        0.731 #> 6        2000        0.736 ggplot2::ggplot(result, ggplot2::aes(sample_size, percentile95)) +   ggplot2::geom_point(alpha = 0.7, size = 1) +   ggplot2::geom_smooth(se = FALSE, method = \"loess\", formula = y ~ x, span = 0.1) +   ggplot2::labs(     x = \"Sample size (n)\",     y = \"95th percentile of index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"plot-the-95th-percentile","dir":"Articles","previous_headings":"","what":"Plot the 95th-percentile","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"","code":"ggplot2::ggplot(result, ggplot2::aes(sample_size, percentile95)) +   ggplot2::geom_point(alpha = 0.7, size = 1) +   ggplot2::geom_smooth(se = FALSE, method = \"loess\", formula = y ~ x, span = 0.1) +   ggplot2::labs(     x = \"Sample size (n)\",     y = \"95th percentile of index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/more_descriptives.html","id":"return-value-4","dir":"Articles","previous_headings":"","what":"Return value","title":"Exploring Potential of Functions to be used for Projection Pursuit","text":"ppi_samplesize_effect() returns tibble: sample_size: sample size block simulations percentile95: empirical 95th percentile index across n_sim simulations size.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"vignette presents compact workflow built around five functions: squintAngleEstimate(), profileRotation(), compareSmoothing(), timeSequence() getTrace().","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"library(spinebil) library(tourr) library(ggplot2) library(dplyr) library(tidyr)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"squintangleestimate","dir":"Articles","previous_headings":"","what":"1) squintAngleEstimate()","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"far away (projection space) pattern become visible chosen index? squintAngleEstimate(), produces distribution squint angles repeatedly walking random 2‑D planes toward assumed optimal plane (best view structure) recording first point along path user‑chosen index function exceeds visibility cutoff. Interpretation: Larger squint angles ⇒ easier see (index crosses cutoff still far optimal plane). Smaller squint angles ⇒ harder see (index crosses close optimal plane).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"function-usage","dir":"Articles","previous_headings":"","what":"Function usage","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"squintAngleEstimate(   data,            # numeric matrix/data frame (n x p)   indexF,          # function: (n x 2) -> numeric scalar   cutoff,          # numeric threshold for 'visible'   structurePlane,  # 2-D basis (p x 2) representing the optimal view   n = 100,         # number of random starts   stepSize = 0.01  # interpolation step along the tour path )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example Usage","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"library(spinebil) data <- spiralData(4, 50) indexF <- scagIndex(\"stringy\") cutoff <- 0.7 structurePlane <- basisMatrix(3,4,4) squintAngleEstimate(data, indexF, cutoff, structurePlane, n=10) [1] 1.247627 1.440900 1.278476 1.364699 1.311972 1.235694 1.508794 1.251345  [9] 1.476975 1.561042"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"Choose index matches pattern care . scagnostics-style indices, example: Set data‑driven results comparable across datasets indices. Preferred: 95th–99th percentile index computed random projections (null specific structure targeted). can use indexNoiseThreshold() estimate cutoff automatically. know two variables define structure, construct basis directly. Otherwise, run guided tour maximize index use best basis returns. n = 100 typically yields stable distribution summaries plots. stepSize = 0.01 good accuracy/speed trade‑. threshold crossing looks coarse (index jumps cutoff), try 0.005. runtime issue, use something larger (e.g., 0.02).","code":"indexF <- scagIndex(\"stringy\")   # sine-wave/spiral-like # indexF <- scagIndex(\"skinny\")  # elongated patterns"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"indexf-what-kind-of-structure","dir":"Articles","previous_headings":"","what":"indexF (what kind of structure?)","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"Choose index matches pattern care . scagnostics-style indices, example:","code":"indexF <- scagIndex(\"stringy\")   # sine-wave/spiral-like # indexF <- scagIndex(\"skinny\")  # elongated patterns"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"cutoff-when-do-we-call-it-visible","dir":"Articles","previous_headings":"","what":"cutoff (when do we call it visible?)","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"Set data‑driven results comparable across datasets indices. Preferred: 95th–99th percentile index computed random projections (null specific structure targeted). can use indexNoiseThreshold() estimate cutoff automatically.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"structureplane-where-is-the-best-view","dir":"Articles","previous_headings":"","what":"structurePlane (where is the best view?)","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"know two variables define structure, construct basis directly. Otherwise, run guided tour maximize index use best basis returns.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"n-and-stepsize","dir":"Articles","previous_headings":"","what":"n and stepSize","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"n = 100 typically yields stable distribution summaries plots. stepSize = 0.01 good accuracy/speed trade‑. threshold crossing looks coarse (index jumps cutoff), try 0.005. runtime issue, use something larger (e.g., 0.02).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"return-value","dir":"Articles","previous_headings":"","what":"Return value","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"squintAngleEstimate() returns numeric vector length n containing squint-angle estimates specified index cutoff.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"profilerotation","dir":"Articles","previous_headings":"","what":"2) profileRotation()","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"index value stay 2‑D data rotated? profileRotation() tests rotation invariance one 2-D projection indices. Interpretation Flat profile → rotation invariant. Oscillating profile → orientation dependence. d: numeric matrix 2 columns; 2-D data rotated. indexList: list functions, taking (n×2)(n \\times 2) numeric matrix returning single numeric index value. Examples: list(tourr::holes(), scagIndex(\"stringy\"), mineIndexE(\"MIC\")). indexLabels: character vector labels (one per index indexList) used column names result. n (default = 200): integer number rotation steps.  Perfect circle (constant radius) → rotation invariant. Deformed/flower-like shape → orientation dependence. numeric matrix n + 1 rows length(indexLabels) + 1 columns: One column per index (named indexLabels) containing index values angle. additional column alpha giving corresponding angles radians.","code":"profileRotation(   d,            # 2-column numeric matrix (the data to rotate)   indexList,    # list of functions: (n x 2) -> numeric   indexLabels,  # character labels for columns   n = 200       # number of rotation steps across [0, 2*pi] ) d <- as.matrix(sinData(2, 30)) New names: • `` -> `...1` • `` -> `...2` indexList <- list(tourr::holes(), scagIndex(\"stringy\"), mineIndexE(\"MIC\")) indexLabels <- c(\"holes\", \"stringy\", \"mic\") pRot <- profileRotation(d, indexList, indexLabels, n = 50) plotRotation(pRot)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"function-usage-1","dir":"Articles","previous_headings":"","what":"Function Usage","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"profileRotation(   d,            # 2-column numeric matrix (the data to rotate)   indexList,    # list of functions: (n x 2) -> numeric   indexLabels,  # character labels for columns   n = 200       # number of rotation steps across [0, 2*pi] )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"inputs-1","dir":"Articles","previous_headings":"","what":"Inputs","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"d: numeric matrix 2 columns; 2-D data rotated. indexList: list functions, taking (n×2)(n \\times 2) numeric matrix returning single numeric index value. Examples: list(tourr::holes(), scagIndex(\"stringy\"), mineIndexE(\"MIC\")). indexLabels: character vector labels (one per index indexList) used column names result. n (default = 200): integer number rotation steps.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"example-usage-1","dir":"Articles","previous_headings":"","what":"Example Usage","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"d <- as.matrix(sinData(2, 30)) New names: • `` -> `...1` • `` -> `...2` indexList <- list(tourr::holes(), scagIndex(\"stringy\"), mineIndexE(\"MIC\")) indexLabels <- c(\"holes\", \"stringy\", \"mic\") pRot <- profileRotation(d, indexList, indexLabels, n = 50) plotRotation(pRot)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"Perfect circle (constant radius) → rotation invariant. Deformed/flower-like shape → orientation dependence.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"return-value-1","dir":"Articles","previous_headings":"","what":"Return value","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"numeric matrix n + 1 rows length(indexLabels) + 1 columns: One column per index (named indexLabels) containing index values angle. additional column alpha giving corresponding angles radians.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"comparesmoothing","dir":"Articles","previous_headings":"","what":"3) compareSmoothing()","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"Projection–pursuit indices evaluated along tour path can spiky due small numerical changes projection point-level noise. compareSmoothing() provides principled way smooth traces averaging index local perturbations, compare different smoothing strategies side--side. supports two kinds perturbations: jitterAngle: randomly jitter projection plane small angle alpha via geodesic moves, recompute index. jitterPoints: randomly jitter projected points small amount (using base::jitter()), recompute index. noSmoothing: original index perturbation. Averaging across multiple perturbations reduces high-frequency noise reveals underlying trend index along tour. d, numeric data matrix p columns. projected d %*% basis basis tPath. tPath, list (p × 2) projection bases. Typically built tour history using tourr::save_history() tourr::interpolate(). idx, index function accepting two-column matrix returning single numeric value (e.g., scagIndex(\"stringy\")). alphaV, numeric vector jitter magnitudes compare. n, number evaluations entering mean value calculation (larger n → smoother, slower).  noSmoothing (red, solid): raw index trace along tour. Spiky traces indicate high sensitivity tiny projection changes. jitterAngle (black, dashed): averaging nearby projection angles. Smooths high‑frequency variability caused small plane movements; preserves structure amplitude better index robust minor orientation shifts. jitterPoints (black, dotted): averaging point noise. Strong smoothing index sensitive local point perturbations. tibble columns: indexMean, mean index value frame (includes original, unjittered value). t, integer frame index along tour path. method, one \"jitterAngle\", \"jitterPoints\", \"noSmoothing\". alpha, jitter magnitude used row.","code":"compareSmoothing(   d,         # data matrix (n x p)   tPath,     # interpolated tour path: list of projection bases (p x 2)   idx,       # index function   alphaV = c(0.01, 0.05, 0.1),  jitter amounts to compare (for jittering angle or points)   n = 10     # number of evaluations entering mean value calculation ) d <- spiralData(3, 30) tPath <- tourr::save_history(d, max_bases=2) tPath <- as.list(tourr::interpolate(tPath, 0.3)) idx <- scagIndex(\"stringy\") compS <- compareSmoothing(d, tPath, idx, alphaV = c(0.01, 0.05), n=2) plotSmoothingComparison(compS, lPos = \"bottom\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"function-usage-2","dir":"Articles","previous_headings":"","what":"Function Usage","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"compareSmoothing(   d,         # data matrix (n x p)   tPath,     # interpolated tour path: list of projection bases (p x 2)   idx,       # index function   alphaV = c(0.01, 0.05, 0.1),  jitter amounts to compare (for jittering angle or points)   n = 10     # number of evaluations entering mean value calculation )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"inputs-2","dir":"Articles","previous_headings":"","what":"Inputs","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"d, numeric data matrix p columns. projected d %*% basis basis tPath. tPath, list (p × 2) projection bases. Typically built tour history using tourr::save_history() tourr::interpolate(). idx, index function accepting two-column matrix returning single numeric value (e.g., scagIndex(\"stringy\")). alphaV, numeric vector jitter magnitudes compare. n, number evaluations entering mean value calculation (larger n → smoother, slower).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"example-usage-2","dir":"Articles","previous_headings":"","what":"Example Usage","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"d <- spiralData(3, 30) tPath <- tourr::save_history(d, max_bases=2) tPath <- as.list(tourr::interpolate(tPath, 0.3)) idx <- scagIndex(\"stringy\") compS <- compareSmoothing(d, tPath, idx, alphaV = c(0.01, 0.05), n=2) plotSmoothingComparison(compS, lPos = \"bottom\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"interpretation-1","dir":"Articles","previous_headings":"","what":"Interpretation","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"noSmoothing (red, solid): raw index trace along tour. Spiky traces indicate high sensitivity tiny projection changes. jitterAngle (black, dashed): averaging nearby projection angles. Smooths high‑frequency variability caused small plane movements; preserves structure amplitude better index robust minor orientation shifts. jitterPoints (black, dotted): averaging point noise. Strong smoothing index sensitive local point perturbations.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"return-value-2","dir":"Articles","previous_headings":"","what":"Return value","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"tibble columns: indexMean, mean index value frame (includes original, unjittered value). t, integer frame index along tour path. method, one \"jitterAngle\", \"jitterPoints\", \"noSmoothing\". alpha, jitter magnitude used row.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"timesequence","dir":"Articles","previous_headings":"","what":"4) timeSequence()","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"cost evaluating projection pursuit index can vary data distribution projection. timeSequence() times index sequence projection bases returns simple table can plot summarise. d: numeric matrix size n×pn \\times p. t: list (p × 2) projection bases (e.g., tourr::basis_random() interpolated tour history). idx: index function mapping two-column matrix single numeric value (e.g., scagIndex(\"stringy\")). pmax: integer limit; evaluation stops pmax projections even t longer. data frame two columns: t: elapsed time seconds index evaluation projection. : sequence index (1, 2, …) projection t.","code":"timeSequence(   d,      # numeric data matrix (n x p)   t,      # list of projection matrices (each p x 2); e.g., an interpolated tour path   idx,    # index function: (n x 2) -> numeric   pmax    # maximum number of projections to evaluate (cut t if longer than pmax) ) d <- spiralData(4, 500) t <- purrr::map(1:10, ~ tourr::basis_random(4)) idx <- scagIndex(\"stringy\") timeSequence(d, t, idx, 10) t  i 1  0.042  1 2  0.041  2 3  0.040  3 4  0.041  4 5  0.040  5 6  0.042  6 7  0.044  7 8  0.040  8 9  0.042  9 10 0.048 10"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"function-usage-3","dir":"Articles","previous_headings":"","what":"Function Usage","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"timeSequence(   d,      # numeric data matrix (n x p)   t,      # list of projection matrices (each p x 2); e.g., an interpolated tour path   idx,    # index function: (n x 2) -> numeric   pmax    # maximum number of projections to evaluate (cut t if longer than pmax) )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"inputs-3","dir":"Articles","previous_headings":"","what":"Inputs","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"d: numeric matrix size n×pn \\times p. t: list (p × 2) projection bases (e.g., tourr::basis_random() interpolated tour history). idx: index function mapping two-column matrix single numeric value (e.g., scagIndex(\"stringy\")). pmax: integer limit; evaluation stops pmax projections even t longer.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"example-usage-3","dir":"Articles","previous_headings":"","what":"Example Usage","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"d <- spiralData(4, 500) t <- purrr::map(1:10, ~ tourr::basis_random(4)) idx <- scagIndex(\"stringy\") timeSequence(d, t, idx, 10) t  i 1  0.042  1 2  0.041  2 3  0.040  3 4  0.041  4 5  0.040  5 6  0.042  6 7  0.044  7 8  0.040  8 9  0.042  9 10 0.048 10"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"return-value-3","dir":"Articles","previous_headings":"","what":"Return value","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"data frame two columns: t: elapsed time seconds index evaluation projection. : sequence index (1, 2, …) projection t.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"gettrace","dir":"Articles","previous_headings":"","what":"5) getTrace()","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"getTrace() evaluates one projection pursuit indices along interpolated, planned tour path returns values frame. Plotting traces reveals whether index varies smoothly small changes projection (desirable), exhibits spikes (potentially unstable, overly sensitive, ‑smoothed). smooth trace indicates small rotations view produce small changes index,important property guided tours optimisation. combination plotTrace(), can quickly diagnose index behaviour across path connecting user‑specified views.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"function-usage-4","dir":"Articles","previous_headings":"","what":"Function Usage","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"getTrace(   d,           # data: matrix/data frame (n x p)   m,           # list of projection matrices for the planned tour   indexList,   # list of index functions to calculate for each entry -> numeric   indexLabels  # character vector of labels for the indices )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"inputs-4","dir":"Articles","previous_headings":"","what":"Inputs","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"d; numeric data p columns. m; list (p × 2) projection matrices planned tour. indexList; list functions take two‑column matrix return numeric scalar (e.g., tourr::holes(), tourr::cmass(), scagIndex(\"stringy\")). indexLabels; character vector length order indexList; used column names output.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"example-usage-4","dir":"Articles","previous_headings":"","what":"Example Usage","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"","code":"d <- spiralData(4, 100) m <- list(basisMatrix(1,2,4), basisMatrix(3,4,4)) indexList <- list(tourr::holes(), tourr::cmass()) indexLabels <- c(\"holes\", \"cmass\") trace <- getTrace(d, m, indexList, indexLabels) plotTrace(trace) plotTrace(trace, rescY = FALSE)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppiDiagnostics.html","id":"return-value-4","dir":"Articles","previous_headings":"","what":"Return value","title":"spinebil: Core Diagnostics for Projection Pursuit Indices","text":"numeric matrix length(indexLabels) + 1 columns many rows interpolation frames. Columns index values (named indexLabels) t (frame index).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Studying the Behaviour of Projection Pursuit Indices","text":"vignette introduce three example datasets; spiral, sine, pipe dataset evaluate five key characteristics projection pursuit indices (PPIs): smoothness, squintability, flexibility, rotation invariance speed. generate datasets first, walk one section per characteristic functions provided spinebil.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"data-generators","dir":"Articles","previous_headings":"","what":"Data Generators","title":"Studying the Behaviour of Projection Pursuit Indices","text":"pipe_data(n, p, t); pipe (circular ring) structure. sin_data(n, p, f); sine relationship. spiral_data(n, p); archimedean spiral.  Now employ patterns evaluate key characteristics PPIs.","code":"n <- 500 p <- 4 lst <- list(   Pipe   = spinebil::pipe_data(n, p),   Sine   = spinebil::sin_data(n, p, 1),   Spiral = spinebil::spiral_data(n, p) )  df_all <- do.call(rbind, lapply(names(lst), function(lbl) {   d <- lst[[lbl]]   data.frame(x = d[[p - 1]], y = d[[p]], structure = lbl) }))  ggplot2::ggplot(df_all, ggplot2::aes(x, y)) +   ggplot2::geom_point(alpha = 0.6, size = 0.6) +   ggplot2::facet_wrap(~ structure, nrow = 1, scales=\"free\") +   ggplot2::theme(     aspect.ratio = 1,     axis.text  = ggplot2::element_blank(),     axis.ticks = ggplot2::element_blank(),     axis.title = ggplot2::element_blank()   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"compare_smoothing","dir":"Articles","previous_headings":"","what":"1) compare_smoothing()","title":"Studying the Behaviour of Projection Pursuit Indices","text":"Projection pursuit indices evaluated along tour path can spiky due small numerical changes projection point-level noise. compare_smoothing() provides principled way smooth traces averaging index local perturbations, compare different smoothing strategies side--side. supports two kinds perturbations: jitter_angle: randomly jitter projection plane small angle alpha via geodesic moves, recompute index. jitter_points: randomly jitter projected points small amount (using base::jitter()), recompute index. no_smoothing: original index perturbation. Averaging across multiple perturbations reduces high-frequency noise reveals underlying trend index along tour. d, numeric data matrix p columns. projected d %*% basis basis tPath. tPath, list (p × 2) projection bases. Typically built tour history using tourr::save_history() tourr::interpolate(). idx, index function accepting two-column matrix returning single numeric value (e.g., scag_index(\"stringy\")). alphaV, numeric vector jitter magnitudes compare. n, number evaluations entering mean value calculation (larger n → smoother, slower).  no_smoothing (red, solid): raw index trace along tour. Spiky traces indicate high sensitivity tiny projection changes. jitter_angle (black, dashed): averaging nearby projection angles. Smooths high‑frequency variability caused small plane movements; preserves structure amplitude better index robust minor orientation shifts. jitter_points (black, dotted): averaging point noise. Strong smoothing index sensitive local point perturbations. tibble columns: index_mean, mean index value frame (includes original, unjittered value). t, integer frame index along tour path. method, one \"jitter_angle\", \"jitter_points\", \"no_smoothing\". alpha, jitter magnitude used row.","code":"compare_smoothing(   d,         # data matrix (n x p)   tPath,     # interpolated tour path: list of projection bases (p x 2)   idx,       # index function   alphaV = c(0.01, 0.05, 0.1),  jitter amounts to compare (for jittering angle or points)   n = 10     # number of evaluations entering mean value calculation ) d <- as.matrix(spinebil::spiral_data(30,4)) tPath <- tourr::save_history(d, max_bases=2) tPath <- as.list(tourr::interpolate(tPath, 0.3)) idx <- spinebil::scag_index(\"stringy\") compS <- spinebil::compare_smoothing(d, tPath, idx, alphaV = c(0.01, 0.05), n=2) spinebil::plot_smoothing_comparison(compS, lPos = \"bottom\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"function-usage","dir":"Articles","previous_headings":"","what":"Function Usage","title":"Studying the Behaviour of Projection Pursuit Indices","text":"","code":"compare_smoothing(   d,         # data matrix (n x p)   tPath,     # interpolated tour path: list of projection bases (p x 2)   idx,       # index function   alphaV = c(0.01, 0.05, 0.1),  jitter amounts to compare (for jittering angle or points)   n = 10     # number of evaluations entering mean value calculation )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Studying the Behaviour of Projection Pursuit Indices","text":"d, numeric data matrix p columns. projected d %*% basis basis tPath. tPath, list (p × 2) projection bases. Typically built tour history using tourr::save_history() tourr::interpolate(). idx, index function accepting two-column matrix returning single numeric value (e.g., scag_index(\"stringy\")). alphaV, numeric vector jitter magnitudes compare. n, number evaluations entering mean value calculation (larger n → smoother, slower).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Studying the Behaviour of Projection Pursuit Indices","text":"","code":"d <- as.matrix(spinebil::spiral_data(30,4)) tPath <- tourr::save_history(d, max_bases=2) tPath <- as.list(tourr::interpolate(tPath, 0.3)) idx <- spinebil::scag_index(\"stringy\") compS <- spinebil::compare_smoothing(d, tPath, idx, alphaV = c(0.01, 0.05), n=2) spinebil::plot_smoothing_comparison(compS, lPos = \"bottom\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Studying the Behaviour of Projection Pursuit Indices","text":"no_smoothing (red, solid): raw index trace along tour. Spiky traces indicate high sensitivity tiny projection changes. jitter_angle (black, dashed): averaging nearby projection angles. Smooths high‑frequency variability caused small plane movements; preserves structure amplitude better index robust minor orientation shifts. jitter_points (black, dotted): averaging point noise. Strong smoothing index sensitive local point perturbations.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"return-value","dir":"Articles","previous_headings":"","what":"Return value","title":"Studying the Behaviour of Projection Pursuit Indices","text":"tibble columns: index_mean, mean index value frame (includes original, unjittered value). t, integer frame index along tour path. method, one \"jitter_angle\", \"jitter_points\", \"no_smoothing\". alpha, jitter magnitude used row.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"squint_angle_estimate","dir":"Articles","previous_headings":"","what":"2) squint_angle_estimate()","title":"Studying the Behaviour of Projection Pursuit Indices","text":"far away (projection space) pattern become visible chosen index? squint_angle_estimate(), produces distribution squint angles repeatedly walking random 2‑D planes toward assumed optimal plane (best view structure) recording first point along path user‑chosen index function exceeds visibility cutoff. Interpretation: Larger squint angles ⇒ easier see (index crosses cutoff still far optimal plane). Smaller squint angles ⇒ harder see (index crosses close optimal plane).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"function-usage-1","dir":"Articles","previous_headings":"","what":"Function usage","title":"Studying the Behaviour of Projection Pursuit Indices","text":"","code":"squint_angle_estimate(   data,            # numeric matrix/data frame (n x p)   indexF,          # function: (n x 2) -> numeric scalar   cutoff,          # numeric threshold for 'visible'   structure_plane,  # 2-D basis (p x 2) representing the optimal view   n = 100,         # number of random starts   step_size = 0.01  # interpolation step along the tour path )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"example-usage-1","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Studying the Behaviour of Projection Pursuit Indices","text":"","code":"data <- as.matrix(spinebil::spiral_data(50, 4)) indexF <- spinebil::scag_index(\"stringy\") cutoff <- 0.7 structure_plane <- spinebil::basis_matrix(3,4,4) spinebil::squint_angle_estimate(data, indexF, cutoff, structure_plane, n=10) #>  [1] 1.2608853 0.8575882 1.5517116 1.2912668 1.6689615 1.4934251 1.3363701 #>  [8] 1.7699582 1.9304979 1.3067327"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"inputs-1","dir":"Articles","previous_headings":"","what":"Inputs","title":"Studying the Behaviour of Projection Pursuit Indices","text":"Choose index matches pattern care . scagnostics-style indices, example: Set data‑driven results comparable across datasets indices. Preferred: 95th–99th percentile index computed random projections (null specific structure targeted). can use index_noise_threshold() estimate cutoff automatically. know two variables define structure, construct basis directly. Otherwise, run guided tour maximize index use best basis returns. n = 100 typically yields stable distribution summaries plots. step_size = 0.01 good accuracy/speed trade‑. threshold crossing looks coarse (index jumps cutoff), try 0.005. runtime issue, use something larger (e.g., 0.02).","code":"indexF <- scag_index(\"stringy\")   # sine-wave/spiral-like indexF <- scag_index(\"skinny\")  # elongated patterns"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"indexf-what-kind-of-structure","dir":"Articles","previous_headings":"","what":"indexF (what kind of structure?)","title":"Studying the Behaviour of Projection Pursuit Indices","text":"Choose index matches pattern care . scagnostics-style indices, example:","code":"indexF <- scag_index(\"stringy\")   # sine-wave/spiral-like indexF <- scag_index(\"skinny\")  # elongated patterns"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"cutoff-when-do-we-call-it-visible","dir":"Articles","previous_headings":"","what":"cutoff (when do we call it visible?)","title":"Studying the Behaviour of Projection Pursuit Indices","text":"Set data‑driven results comparable across datasets indices. Preferred: 95th–99th percentile index computed random projections (null specific structure targeted). can use index_noise_threshold() estimate cutoff automatically.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"structure_plane-where-is-the-best-view","dir":"Articles","previous_headings":"","what":"structure_plane (where is the best view?)","title":"Studying the Behaviour of Projection Pursuit Indices","text":"know two variables define structure, construct basis directly. Otherwise, run guided tour maximize index use best basis returns.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"n-and-step_size","dir":"Articles","previous_headings":"","what":"n and step_size","title":"Studying the Behaviour of Projection Pursuit Indices","text":"n = 100 typically yields stable distribution summaries plots. step_size = 0.01 good accuracy/speed trade‑. threshold crossing looks coarse (index jumps cutoff), try 0.005. runtime issue, use something larger (e.g., 0.02).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"return-value-1","dir":"Articles","previous_headings":"","what":"Return value","title":"Studying the Behaviour of Projection Pursuit Indices","text":"squint_angle_estimate() returns numeric vector length n containing squint-angle estimates specified index cutoff.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"get_trace","dir":"Articles","previous_headings":"","what":"3) get_trace()","title":"Studying the Behaviour of Projection Pursuit Indices","text":"get_trace() evaluates one projection pursuit indices along interpolated, planned tour path returns values frame. Plotting traces reveals whether index varies smoothly small changes projection (desirable), exhibits spikes (potentially unstable, overly sensitive, ‑smoothed). smooth trace indicates small rotations view produce small changes index,important property guided tours optimisation. combination plot_trace(), can quickly diagnose index behaviour across path connecting user‑specified views.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"function-usage-2","dir":"Articles","previous_headings":"","what":"Function Usage","title":"Studying the Behaviour of Projection Pursuit Indices","text":"","code":"get_trace(   d,           # data: matrix/data frame (n x p)   m,           # list of projection matrices for the planned tour   index_list,   # list of index functions to calculate for each entry -> numeric   index_labels  # character vector of labels for the indices )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"inputs-2","dir":"Articles","previous_headings":"","what":"Inputs","title":"Studying the Behaviour of Projection Pursuit Indices","text":"d; numeric data p columns. m; list (p × 2) projection matrices planned tour. index_list; list functions take two‑column matrix return numeric scalar (e.g., tourr::holes(), tourr::cmass(), scag_index(\"stringy\")). index_labels; character vector length order index_list; used column names output.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"example-usage-2","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Studying the Behaviour of Projection Pursuit Indices","text":"","code":"d <- as.matrix(spinebil::spiral_data(100, 4)) m <- list(spinebil::basis_matrix(1,2,4), spinebil::basis_matrix(3,4,4)) index_list <- list(tourr::holes(), tourr::norm_kol(100)) index_labels <- c(\"holes\", \"norm kol\") trace <- spinebil::get_trace(d, m, index_list, index_labels) spinebil::plot_trace(trace) spinebil::plot_trace(trace, rescY = FALSE)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"return-value-2","dir":"Articles","previous_headings":"","what":"Return value","title":"Studying the Behaviour of Projection Pursuit Indices","text":"numeric matrix length(index_labels) + 1 columns many rows interpolation frames. Columns index values (named index_labels) t (frame index).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"profile_rotation","dir":"Articles","previous_headings":"","what":"4) profile_rotation()","title":"Studying the Behaviour of Projection Pursuit Indices","text":"index value stay 2‑D data rotated? profile_rotation() tests rotation invariance one 2-D projection indices. Interpretation Flat profile → rotation invariant. Oscillating profile → orientation dependence. d: numeric matrix 2 columns; 2-D data rotated. index_list: list functions, taking (n×2)(n \\times 2) numeric matrix returning single numeric index value. Examples: list(tourr::holes(), scag_index(\"stringy\"), mine_indexE(\"MIC\")). index_labels: character vector labels (one per index index_list) used column names result. n (default = 200): integer number rotation steps.  Perfect circle (constant radius) → rotation invariant. Deformed/flower-like shape → orientation dependence. numeric matrix n + 1 rows length(index_labels) + 1 columns: One column per index (named index_labels) containing index values angle. additional column alpha giving corresponding angles radians.","code":"profile_rotation(   d,            # 2-column numeric matrix (the data to rotate)   index_list,    # list of functions: (n x 2) -> numeric   index_labels,  # character labels for columns   n = 200       # number of rotation steps across [0, 2*pi] ) d <- as.matrix(spinebil::sin_data(30, 2)) index_list <- list(tourr::holes(), spinebil::scag_index(\"stringy\"), spinebil::mine_indexE(\"MIC\")) index_labels <- c(\"holes\", \"stringy\", \"mic\") pRot <- spinebil::profile_rotation(d, index_list, index_labels, n = 50) spinebil::plot_rotation(pRot)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"function-usage-3","dir":"Articles","previous_headings":"","what":"Function Usage","title":"Studying the Behaviour of Projection Pursuit Indices","text":"","code":"profile_rotation(   d,            # 2-column numeric matrix (the data to rotate)   index_list,    # list of functions: (n x 2) -> numeric   index_labels,  # character labels for columns   n = 200       # number of rotation steps across [0, 2*pi] )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"inputs-3","dir":"Articles","previous_headings":"","what":"Inputs","title":"Studying the Behaviour of Projection Pursuit Indices","text":"d: numeric matrix 2 columns; 2-D data rotated. index_list: list functions, taking (n×2)(n \\times 2) numeric matrix returning single numeric index value. Examples: list(tourr::holes(), scag_index(\"stringy\"), mine_indexE(\"MIC\")). index_labels: character vector labels (one per index index_list) used column names result. n (default = 200): integer number rotation steps.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"example-usage-3","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Studying the Behaviour of Projection Pursuit Indices","text":"","code":"d <- as.matrix(spinebil::sin_data(30, 2)) index_list <- list(tourr::holes(), spinebil::scag_index(\"stringy\"), spinebil::mine_indexE(\"MIC\")) index_labels <- c(\"holes\", \"stringy\", \"mic\") pRot <- spinebil::profile_rotation(d, index_list, index_labels, n = 50) spinebil::plot_rotation(pRot)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"interpretation-1","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Studying the Behaviour of Projection Pursuit Indices","text":"Perfect circle (constant radius) → rotation invariant. Deformed/flower-like shape → orientation dependence.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"return-value-3","dir":"Articles","previous_headings":"","what":"Return value","title":"Studying the Behaviour of Projection Pursuit Indices","text":"numeric matrix n + 1 rows length(index_labels) + 1 columns: One column per index (named index_labels) containing index values angle. additional column alpha giving corresponding angles radians.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"time_sequence","dir":"Articles","previous_headings":"","what":"5) time_sequence()","title":"Studying the Behaviour of Projection Pursuit Indices","text":"cost evaluating projection pursuit index can vary data distribution projection. time_sequence() times index sequence projection bases returns simple table can plot summarise. d: numeric matrix size n×pn \\times p. t: list (p × 2) projection bases (e.g., tourr::basis_random() interpolated tour history). idx: index function mapping two-column matrix single numeric value (e.g., scag_index(\"stringy\")). pmax: integer limit; evaluation stops pmax projections even t longer. data frame two columns: t: elapsed time seconds index evaluation projection. : sequence index (1, 2, …) projection t.","code":"time_sequence(   d,      # numeric data matrix (n x p)   t,      # list of projection matrices (each p x 2); e.g., an interpolated tour path   idx,    # index function: (n x 2) -> numeric   pmax    # maximum number of projections to evaluate (cut t if longer than pmax) ) d <- as.matrix(spinebil::spiral_data(500, 4)) t <- purrr::map(1:10, ~ tourr::basis_random(4)) idx <- spinebil::scag_index(\"stringy\") spinebil::time_sequence(d, t, idx, 10) #>        t  i #> 1  0.036  1 #> 2  0.039  2 #> 3  0.036  3 #> 4  0.038  4 #> 5  0.038  5 #> 6  0.034  6 #> 7  0.037  7 #> 8  0.039  8 #> 9  0.038  9 #> 10 0.038 10"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"function-usage-4","dir":"Articles","previous_headings":"","what":"Function Usage","title":"Studying the Behaviour of Projection Pursuit Indices","text":"","code":"time_sequence(   d,      # numeric data matrix (n x p)   t,      # list of projection matrices (each p x 2); e.g., an interpolated tour path   idx,    # index function: (n x 2) -> numeric   pmax    # maximum number of projections to evaluate (cut t if longer than pmax) )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"inputs-4","dir":"Articles","previous_headings":"","what":"Inputs","title":"Studying the Behaviour of Projection Pursuit Indices","text":"d: numeric matrix size n×pn \\times p. t: list (p × 2) projection bases (e.g., tourr::basis_random() interpolated tour history). idx: index function mapping two-column matrix single numeric value (e.g., scag_index(\"stringy\")). pmax: integer limit; evaluation stops pmax projections even t longer.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"example-usage-4","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Studying the Behaviour of Projection Pursuit Indices","text":"","code":"d <- as.matrix(spinebil::spiral_data(500, 4)) t <- purrr::map(1:10, ~ tourr::basis_random(4)) idx <- spinebil::scag_index(\"stringy\") spinebil::time_sequence(d, t, idx, 10) #>        t  i #> 1  0.036  1 #> 2  0.039  2 #> 3  0.036  3 #> 4  0.038  4 #> 5  0.038  5 #> 6  0.034  6 #> 7  0.037  7 #> 8  0.039  8 #> 9  0.038  9 #> 10 0.038 10"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/ppi_diagnostics.html","id":"return-value-4","dir":"Articles","previous_headings":"","what":"Return value","title":"Studying the Behaviour of Projection Pursuit Indices","text":"data frame two columns: t: elapsed time seconds index evaluation projection. : sequence index (1, 2, …) projection t.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/sampleSizeEffect.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Sample-Size Effects for Projection Pursuit Indexes under Gaussian Noise","text":"demonstrates use ppi_samplesize_effect() function study projection pursuit index (PPI) values behave increasing sample sizes purely noisy (Gaussian) data. Understanding index behaves null conditions critical : Calibrating thresholds statistical significance Identifying sensitivity sample size Comparing robustness across different index functions","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/sampleSizeEffect.html","id":"what-the-function-does","dir":"Articles","previous_headings":"","what":"What the Function Does","title":"Sample-Size Effects for Projection Pursuit Indexes under Gaussian Noise","text":"function ppi_samplesize_effect() runs repeated simulations standard normal noise across range sample sizes. size, computes specified index function samples records 95th percentile index values observed. helps estimate distributional behavior index pure noise, depending sample size. curves useful null reference: -curve values may indicate non-random structure.","code":"library(ggplot2) library(spinebil) library(cassowaryr)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/sampleSizeEffect.html","id":"function-usage","dir":"Articles","previous_headings":"","what":"Function usage","title":"Sample-Size Effects for Projection Pursuit Indexes under Gaussian Noise","text":"index_fun: function accepts data one simulation returns single numeric index value. n_sim: number simulations per sample size (default 100). Internally, function evaluates grid sample sizes 30 2000 (denser small sizes), simulates n_sim draws , returns 95th percentile resulting index values.","code":"ppi_samplesize_effect(index_fun, n_sim = 100)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/sampleSizeEffect.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Sample-Size Effects for Projection Pursuit Indexes under Gaussian Noise","text":"Let’s evaluate stringy index cassowaryr package see values change noise sample size increases.","code":"result <- ppi_samplesize_effect(scagIndex(\"stringy\"), n_sim = 4) head(result) #> # A tibble: 6 × 2 #>   SampleSize Percentile95 #>        <dbl>        <dbl> #> 1         30        0.762 #> 2         35        0.768 #> 3         40        0.788 #> 4         45        0.793 #> 5         50        0.755 #> 6         55        0.802 tail(result) #> # A tibble: 6 × 2 #>   SampleSize Percentile95 #>        <dbl>        <dbl> #> 1       1875        0.744 #> 2       1900        0.742 #> 3       1925        0.740 #> 4       1950        0.734 #> 5       1975        0.735 #> 6       2000        0.744"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/sampleSizeEffect.html","id":"plot-the-95th-percentile","dir":"Articles","previous_headings":"","what":"Plot the 95th-percentile","title":"Sample-Size Effects for Projection Pursuit Indexes under Gaussian Noise","text":"","code":"ggplot(result, aes(SampleSize, Percentile95)) +   geom_point(alpha = 0.7, size = 1) +   geom_smooth(se = FALSE, method = \"loess\", formula = y ~ x, span = 0.1) +   labs(     x = \"Sample size (n)\",     y = \"95th percentile of index\"   )"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/sampleSizeEffect.html","id":"return-value","dir":"Articles","previous_headings":"","what":"Return value","title":"Sample-Size Effects for Projection Pursuit Indexes under Gaussian Noise","text":"ppi_samplesize_effect() returns tibble: SampleSize: sample size block simulations Percentile95: empirical 95th percentile index across n_sim simulations size.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/spinebil.html","id":"about","dir":"Articles","previous_headings":"","what":"About","title":"An introduction to the spinebil package","text":"spinebil package provides tools explore evaluate behavior Projection Pursuit Index (PPI) functions using tour methods, specifically focusing interpolated paths line graphs. offers structured approach assessing different PPI functions behave applied data known structure noise, tracing values along controlled transitions projection planes. Projection pursuit powerful technique multivariate statistics seeks “interesting” low-dimensional projections high-dimensional data. projections identified optimizing index function designed highlight structure clustering, outliers, non-Gaussianity. methods implemented spinebil described detail paper, package builds prior work tourr package.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/spinebil.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"An introduction to the spinebil package","text":"package can installed CRAN using: can install development version GitHub :","code":"install.packages(\"spinebil\") # install.packages(\"devtools\") devtools::install_github(\"uschiLaa/spinebil\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/spinebil.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"An introduction to the spinebil package","text":"main goal spinebil : Provide framework systematically comparing PPI functions. Facilitate visual diagnostics index behavior. Enable reproducible experiments simulated data understand well indices detect meaningful structure versus random noise.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/spinebil.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"An introduction to the spinebil package","text":"evaluate index behaviour known input distribution can trace value interpolating tour path, example moving nuisance structured projection.","code":"library(spinebil) ## sample from the spiral distribution d <- spiral_data(100, 4) ## the first two parameters are noise ## parameters 3 and 4 contain a spiral ## we write a list with the nuisance and structured plane m <- list(basis_matrix(1,2,4), basis_matrix(3,4,4)) ## the index functions to be evaluated should also be passed in a list index_list <- list(tourr::holes(), tourr::cmass()) index_labels <- c(\"holes\", \"cmass\") ## we can now compute the index traces and plot them trace <- get_trace(d, m, index_list, index_labels) Converting input data to the required matrix format. plot_trace(trace)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/spinebil.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"An introduction to the spinebil package","text":"spinebil particularly useful researchers developers designing new projection pursuit indices wanting better understand strengths weaknesses existing ones. using tour-based visual diagnostics, helps bridge gap statistical rigor exploratory data analysis.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Generating Synthetic Structures and Noise","text":"vignette shows use two helpers package quick experiment data: data_gen()— generate structured 2D point sets (e.g., sine, circle, cluster) orthogonal polynomial features. noise_gen()— generate noise samples several distributions (Gaussian, uniform, heavy-tailed, microstructure, etc.). ’ll preview available structures, create simple polynomial features, sample noise types, combine structure + noise.","code":"library(tidyverse) library(spinebil)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"what-the-function-does","dir":"Articles","previous_headings":"","what":"What the Function Does","title":"Generating Synthetic Structures and Noise","text":"Creates synthetic data benchmarking/visualisation. Structures (type like \"sine\", \"circle\", …) return tibble columns x, y, structure. Polynomial (type = \"polynomial\") returns n × degree matrix orthogonal polynomial basis vectors [0,1][0,1]. Generates numeric vector noise values (tibble value type) distributions : \"gaussian\", \"uniform\", \"lognormal\", \"t_distributed\", \"cauchy\", \"beta_noise\", \"exponential\", \"microstructure\".","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"data_gen","dir":"Articles","previous_headings":"","what":"data_gen()","title":"Generating Synthetic Structures and Noise","text":"Creates synthetic data benchmarking/visualisation. Structures (type like \"sine\", \"circle\", …) return tibble columns x, y, structure. Polynomial (type = \"polynomial\") returns n × degree matrix orthogonal polynomial basis vectors [0,1][0,1].","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"noise_gen","dir":"Articles","previous_headings":"","what":"noise_gen()","title":"Generating Synthetic Structures and Noise","text":"Generates numeric vector noise values (tibble value type) distributions : \"gaussian\", \"uniform\", \"lognormal\", \"t_distributed\", \"cauchy\", \"beta_noise\", \"exponential\", \"microstructure\".","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"function-usage","dir":"Articles","previous_headings":"","what":"Function usage","title":"Generating Synthetic Structures and Noise","text":"type: \"linear\", \"sine\", \"circle\", \"cluster\", \"snake\", \"outliers\", \"sparse\", \"clumpy\", \"skewed\", \"striated\", \"concave\", \"monotonic\", \"doughnut\", \"\", \"polynomial\". n: number points/samples. seed: optional seed reproducibility. degree: \"polynomial\"; number basis columns. n: number noise samples. type: distribution name ( \"gaussian\", \"uniform\", \"lognormal\", \"t_distributed\", \"cauchy\", \"beta_noise\", \"exponential\", \"microstructure\"). level: scale/strength noise. seed: optional seed.","code":"data_gen(type, n, seed = NULL, degree = NULL, ...) noise_gen(n, type = \"gaussian\", level = 0.1, seed = NULL, ...)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example usage","title":"Generating Synthetic Structures and Noise","text":"","code":"# One structure df_sine <- data_gen(\"sine\", n = 400, seed = 1)  # Multiple structures at once df_all  <- data_gen(\"all\",  n = 400, seed = 1) ggplot(df_all, aes(x, y)) +   geom_point(alpha = 0.6, size = 0.6) +   facet_wrap(~ structure, scales = \"free\") +   labs(title = \"Synthetic 2D Structures from data_gen()\",        subtitle = \"Each panel generated with n = 400\") # Generate a 4-degree orthogonal polynomial basis dPoly <- data_gen(\"polynomial\", n = 200, degree = 4, seed = 1)  ggplot(dPoly, aes(x = dPoly[,1] , y = dPoly[,2])) +   geom_point(alpha = 0.7) +    xlab(\"polynomial degree 1\") +   ylab(\"polynomial degree 2\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"preview-all-structures","dir":"Articles","previous_headings":"","what":"Preview all structures","title":"Generating Synthetic Structures and Noise","text":"","code":"ggplot(df_all, aes(x, y)) +   geom_point(alpha = 0.6, size = 0.6) +   facet_wrap(~ structure, scales = \"free\") +   labs(title = \"Synthetic 2D Structures from data_gen()\",        subtitle = \"Each panel generated with n = 400\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"polynomial-features-type-polynomial","dir":"Articles","previous_headings":"","what":"Polynomial features (type = \"polynomial\")","title":"Generating Synthetic Structures and Noise","text":"","code":"# Generate a 4-degree orthogonal polynomial basis dPoly <- data_gen(\"polynomial\", n = 200, degree = 4, seed = 1)  ggplot(dPoly, aes(x = dPoly[,1] , y = dPoly[,2])) +   geom_point(alpha = 0.7) +    xlab(\"polynomial degree 1\") +   ylab(\"polynomial degree 2\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"noise_gen-noise-distributions","dir":"Articles","previous_headings":"","what":"noise_gen(): noise distributions","title":"Generating Synthetic Structures and Noise","text":"","code":"eps_g <- noise_gen(n = 500, type = \"gaussian\",   level = 0.06, seed = 340) eps_t <- noise_gen(n = 500, type = \"t_distributed\", level = 0.15, seed = 341) eps_cau <- noise_gen(n = 500, type = \"cauchy\",     level = 0.04, seed = 342)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"combining-structure-noise","dir":"Articles","previous_headings":"","what":"Combining structure + noise","title":"Generating Synthetic Structures and Noise","text":"simple example, let’s take clean sine wave add Gaussian noise y.","code":"set.seed(345) n <- 500 sine_clean <- data_gen(\"sine\", n = n) |> mutate(y = sin(x))   # Noise to add on y eps <- noise_gen(n = n, type = \"gaussian\", level = 0.06, seed = 123)$value sine_noisy <- sine_clean |> mutate(y = y + eps)  bind_rows(   sine_clean  |> mutate(which = \"clean\"),   sine_noisy  |> mutate(which = \"noisy (gaussian, level = 0.06)\") ) |>   ggplot(aes(x, y, color = which)) +   geom_point(alpha = 0.6, size = 0.6) +   labs(title = \"Sine Structure with and without Added Noise\",        color = NULL)"},{"path":"https://uschilaa.github.io/spinebil/index.html/articles/utilsData.html","id":"return-value","dir":"Articles","previous_headings":"","what":"Return value","title":"Generating Synthetic Structures and Noise","text":"data_gen(\"polynomial\", ...) returns n × degree matrix. data_gen(<type>, ...) return tibble columns x, y, structure. noise_gen(...) returns tibble columns value (numeric) type (factor/character).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ursula Laa. Author. Dianne Cook. Author. Tina Rashid Jafari. Author, maintainer.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ursula Laa, Dianne Cook (2020). Using tours visually investigate properties new projection pursuit indexes application problems physics, Computational Statistics, 35:1171–1205 URL: https://doi.org/10.1007/s00180-020-00954-8","code":"@Article{,   title = {Using tours to visually investigate properties of new projection pursuit indexes with application to problems in physics},   author = {{Ursula Laa} and {Dianne Cook}},   journal = {Computational Statistics},   volume = {35},   pages = {1171–1205},   year = {2020},   url = {https://doi.org/10.1007/s00180-020-00954-8}, }"},{"path":"https://uschilaa.github.io/spinebil/index.html/index.html","id":"spinebil-","dir":"","previous_headings":"","what":"Investigating New Projection Pursuit Index Functions","title":"Investigating New Projection Pursuit Index Functions","text":"Studying Projection Pursuit INdex functions Exploration Based Interpolated tour paths Line graphs. spinebil provides functionalities evaluate performance projection pursuit index functions using tour methods presented paper.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Investigating New Projection Pursuit Index Functions","text":"can install released version spinebil CRAN : can install development version GitHub :","code":"install.packages(\"spinebil\") # install.packages(\"devtools\") devtools::install_github(\"uschiLaa/spinebil\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Investigating New Projection Pursuit Index Functions","text":"evaluate index behaviour known input distribution can trace value interpolating tour path, example moving nuisance structured projection.","code":"library(spinebil) ## sample from the spiral distribution d <- spiral_data(100, 4) ## the first two parameters are noise ## parameters 3 and 4 contain a spiral ## we write a list with the nuisance and structured plane m <- list(basis_matrix(1,2,4), basis_matrix(3,4,4)) ## the index functions to be evaluated should also be passed in a list index_list <- list(tourr::holes(), tourr::cmass()) index_labels <- c(\"holes\", \"cmass\") ## we can now compute the index traces and plot them trace <- get_trace(d, m, index_list, index_labels) #> Converting input data to the required matrix format. plot_trace(trace)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basisMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 2-d basis in directions i, j in n dimensions (i,j <= n) — basisMatrix","title":"Generate 2-d basis in directions i, j in n dimensions (i,j <= n) — basisMatrix","text":"Generate 2-d basis directions , j n dimensions (,j <= n)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basisMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 2-d basis in directions i, j in n dimensions (i,j <= n) — basisMatrix","text":"","code":"basisMatrix(i, j, n)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basisMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 2-d basis in directions i, j in n dimensions (i,j <= n) — basisMatrix","text":"first basis direction j second basis direction n number dimensions","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basisMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 2-d basis in directions i, j in n dimensions (i,j <= n) — basisMatrix","text":"basis matrix","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basisVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate basis vector in direction i in n dimensions (i <= n) — basisVector","title":"Generate basis vector in direction i in n dimensions (i <= n) — basisVector","text":"Generate basis vector direction n dimensions (<= n)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basisVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate basis vector in direction i in n dimensions (i <= n) — basisVector","text":"","code":"basisVector(i, n)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basisVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate basis vector in direction i in n dimensions (i <= n) — basisVector","text":"selected direction n number dimensions","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basisVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate basis vector in direction i in n dimensions (i <= n) — basisVector","text":"basis vector","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basis_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 2-d basis in directions i, j in n dimensions (i,j <= n) — basis_matrix","title":"Generate 2-d basis in directions i, j in n dimensions (i,j <= n) — basis_matrix","text":"Generate 2-d basis directions , j n dimensions (,j <= n)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basis_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 2-d basis in directions i, j in n dimensions (i,j <= n) — basis_matrix","text":"","code":"basis_matrix(i, j, n)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basis_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 2-d basis in directions i, j in n dimensions (i,j <= n) — basis_matrix","text":"first basis direction j second basis direction n number dimensions","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basis_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 2-d basis in directions i, j in n dimensions (i,j <= n) — basis_matrix","text":"basis matrix","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basis_nearby.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate nearby bases, e.g. for simulated annealing. — basis_nearby","title":"Generate nearby bases, e.g. for simulated annealing. — basis_nearby","text":"Generate nearby bases, e.g. simulated annealing.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basis_nearby.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate nearby bases, e.g. for simulated annealing. — basis_nearby","text":"","code":"basis_nearby(current, alpha = 0.5, method = \"linear\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basis_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate basis vector in direction i in n dimensions (i <= n) — basis_vector","title":"Generate basis vector in direction i in n dimensions (i <= n) — basis_vector","text":"Generate basis vector direction n dimensions (<= n)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basis_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate basis vector in direction i in n dimensions (i <= n) — basis_vector","text":"","code":"basis_vector(i, n)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basis_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate basis vector in direction i in n dimensions (i <= n) — basis_vector","text":"selected direction n number dimensions","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/basis_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate basis vector in direction i in n dimensions (i <= n) — basis_vector","text":"basis vector","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/compareSmoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare traces with different smoothing options. — compareSmoothing","title":"Compare traces with different smoothing options. — compareSmoothing","text":"Compare traces different smoothing options.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/compareSmoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare traces with different smoothing options. — compareSmoothing","text":"","code":"compareSmoothing(d, tPath, idx, alphaV = c(0.01, 0.05, 0.1), n = 10)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/compareSmoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare traces with different smoothing options. — compareSmoothing","text":"d Data matrix tPath Interpolated tour path (list projections) idx Index function alphaV Jitter amounts compare (jittering angle points) n Number evaluations entering mean value calculation","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/compareSmoothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare traces with different smoothing options. — compareSmoothing","text":"Table mean index values","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/compareSmoothing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare traces with different smoothing options. — compareSmoothing","text":"","code":"d <- spiralData(3, 30) tPath <- tourr::save_history(d, max_bases=2) tPath <- as.list(tourr::interpolate(tPath, 0.3)) idx <- scagIndex(\"stringy\") compS <- compareSmoothing(d, tPath, idx, alphaV = c(0.01, 0.05), n=2) plotSmoothingComparison(compS)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/compare_smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare traces with different smoothing options. — compare_smoothing","title":"Compare traces with different smoothing options. — compare_smoothing","text":"Compare traces different smoothing options.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/compare_smoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare traces with different smoothing options. — compare_smoothing","text":"","code":"compare_smoothing(d, tPath, idx, alphaV = c(0.01, 0.05, 0.1), n = 10)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/compare_smoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare traces with different smoothing options. — compare_smoothing","text":"d Data matrix tPath Interpolated tour path (list projections) idx Index function alphaV Jitter amounts compare (jittering angle points) n Number evaluations entering mean value calculation","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/compare_smoothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare traces with different smoothing options. — compare_smoothing","text":"Table mean index values","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/compare_smoothing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare traces with different smoothing options. — compare_smoothing","text":"","code":"d <- as.matrix(spiral_data(30, 3)) tPath <- tourr::save_history(d, max_bases=2) tPath <- as.list(tourr::interpolate(tPath, 0.3)) idx <- scag_index(\"stringy\") compS <- compare_smoothing(d, tPath, idx, alphaV = c(0.01, 0.05), n=2) plot_smoothing_comparison(compS)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/data_gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Synthetic Data with Various Structures — data_gen","title":"Generate Synthetic Data with Various Structures — data_gen","text":"Generates either: Structured (x, y) scatter data (linear, sine, circle, etc.), matrix scaled orthogonal polynomial features.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/data_gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Synthetic Data with Various Structures — data_gen","text":"","code":"data_gen(type = \"all\", n = 500, degree = NULL, seed = NULL)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/data_gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Synthetic Data with Various Structures — data_gen","text":"type Character string. Options: \"polynomial\" orthogonal polynomial features \"linear\", \"sine\", \"circle\", \"cluster\", \"snake\", \"outliers\", \"sparse\", \"clumpy\", \"skewed\", \"striated\", \"concave\", \"monotonic\", \"doughnut\", \"\" generate scatter structures. n Integer. Number samples generate. Default 500. degree Integer. Degree polynomial features (type = \"polynomial\"). seed Optional integer. Sets random seed reproducibility.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/data_gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Synthetic Data with Various Structures — data_gen","text":"type = \"polynomial\", returns matrix (n x degree). Otherwise tibble columns: x: Numeric vector x-values y: Numeric vector y-values structure: Character name structure type","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/data_gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Synthetic Data with Various Structures — data_gen","text":"","code":"data_gen(\"linear\", n = 200) #> # A tibble: 200 × 3 #>         x      y structure #>     <dbl>  <dbl> <chr>     #>  1  1.19   1.17  linear    #>  2 -1.50  -1.50  linear    #>  3  0.114  0.113 linear    #>  4 -0.806 -0.822 linear    #>  5  0.407  0.414 linear    #>  6  1.74   1.74  linear    #>  7 -0.837 -0.836 linear    #>  8  1.38   1.36  linear    #>  9 -1.26  -1.25  linear    #> 10  1.15   1.13  linear    #> # ℹ 190 more rows data_gen(\"polynomial\", degree = 4, n = 200) #>                  1           2            3            4 #>   [1,]  0.21050040 -1.03564707 -0.398274752  0.973432426 #>   [2,]  1.21604319  0.66250468 -0.377538850 -1.181998457 #>   [3,]  0.59298776 -0.65471720 -1.017331155  0.020427470 #>   [4,]  0.39083363 -0.89658773 -0.747479751  0.611228366 #>   [5,]  1.41182191  1.25467852  0.492156094 -0.488387882 #>   [6,] -0.64746101 -0.70661731  1.247409643 -0.302653731 #>   [7,]  0.34086572 -0.94236312 -0.658859214  0.730876065 #>   [8,]  0.68938910 -0.50737046 -1.083077911 -0.291689224 #>   [9,]  1.13578905  0.44439401 -0.626229982 -1.240331825 #>  [10,]  1.62171101  1.98421716  1.891976806  1.455590216 #>  [11,] -0.46020380 -0.91809668  1.027479675  0.314715394 #>  [12,]  1.19956657  0.61655677 -0.433424934 -1.203047024 #>  [13,] -0.37326107 -0.98977495  0.881091696  0.563867881 #>  [14,]  0.67947344 -0.52347992 -1.078507964 -0.259543258 #>  [15,]  0.52101831 -0.75124526 -0.939726482  0.245776822 #>  [16,] -1.64679525  1.74064293 -1.717380568  1.640874658 #>  [17,]  1.47934460  1.47868583  0.886467531 -0.020116369 #>  [18,]  1.68376089  2.21865628  2.408563347  2.337925174 #>  [19,]  1.59189996  1.87462925  1.661098109  1.086245307 #>  [20,] -0.80587283 -0.46682135  1.301391710 -0.829381933 #>  [21,]  0.61307610 -0.62571749 -1.034820739 -0.044147967 #>  [22,]  1.13411654  0.44000092 -0.630794655 -1.240427047 #>  [23,]  0.90548310 -0.10198257 -1.038230150 -0.929708495 #>  [24,] -0.56930626 -0.80436379  1.173597899 -0.036746805 #>  [25,]  1.66793077  2.15803268  2.272076311  2.097702600 #>  [26,]  1.55322898  1.73541650  1.377896848  0.656572059 #>  [27,]  0.03659735 -1.10124314 -0.008579466  1.113471127 #>  [28,] -0.38878636 -0.97820842  0.908923591  0.521930346 #>  [29,]  0.34004570 -0.94306803 -0.657345901  0.732726487 #>  [30,] -1.25836333  0.52553505  0.506001115 -1.304142976 #>  [31,]  0.37493621 -0.91175361 -0.720075872  0.650725471 #>  [32,]  0.41592432 -0.87150797 -0.789130143  0.546347059 #>  [33,] -1.17250563  0.30223552  0.786246828 -1.427748501 #>  [34,] -0.94066924 -0.21882156  1.227653904 -1.199251205 #>  [35,] -0.03454795 -1.10869172  0.156323004  1.105073500 #>  [36,] -0.80612490 -0.46639530  1.301363408 -0.830166705 #>  [37,]  1.69012006  2.24316646  2.464309914  2.437437807 #>  [38,]  0.55442448 -0.70787227 -0.978557563  0.142598453 #>  [39,]  0.21758959 -1.03154619 -0.413343050  0.963087706 #>  [40,]  0.36371425 -0.92212075 -0.700278163  0.677817515 #>  [41,] -1.06198827  0.03893539  1.050693359 -1.403655404 #>  [42,] -0.44097513 -0.93539733  0.997177293  0.372646783 #>  [43,] -1.31240650  0.67449884  0.293627976 -1.148865763 #>  [44,] -0.35770226 -1.00082862  0.852525478  0.604663660 #>  [45,] -1.59253183  1.55072920 -1.302963842  0.929869646 #>  [46,]  0.45182119 -0.83319220 -0.845095153  0.448513798 #>  [47,]  0.08416342 -1.08998391 -0.117970859  1.097514581 #>  [48,] -0.36672197 -0.99448620  0.869166370  0.581166846 #>  [49,]  1.31256942  0.94381466  0.002454149 -0.950556582 #>  [50,] -0.72993833 -0.58873181  1.292786634 -0.583108518 #>  [51,]  0.46141932 -0.82246172 -0.859296835  0.421434415 #>  [52,] -0.64411773 -0.71107682  1.244838504 -0.291198084 #>  [53,] -1.22330200  0.43236667  0.628713965 -1.371686334 #>  [54,]  1.11376402  0.38704057 -0.684378124 -1.238234075 #>  [55,]  0.85437782 -0.20723152 -1.075664160 -0.796469691 #>  [56,]  0.61970645 -0.61594886 -1.040171301 -0.065561394 #>  [57,] -1.01783663 -0.05865892  1.128147520 -1.347505835 #>  [58,]  1.70773853  2.31154331  2.621529311  2.722331198 #>  [59,]  0.58881843 -0.66062361 -1.013464254  0.033761997 #>  [60,]  0.88299747 -0.14900631 -1.056907890 -0.873049097 #>  [61,]  0.50651976 -0.76929713 -0.921435925  0.289596764 #>  [62,] -1.36413523  0.82316761  0.062973490 -0.936139556 #>  [63,] -1.55590535  1.42624406 -1.043571307  0.513948913 #>  [64,]  0.17951048 -1.05226152 -0.331436412  1.014547297 #>  [65,] -1.63418918  1.69593964 -1.617846948  1.465208933 #>  [66,] -1.07977123  0.07946822  1.015081211 -1.419431413 #>  [67,]  0.51739098 -0.75580543 -0.935230198  0.256798992 #>  [68,]  1.12837512  0.42496757 -0.646277111 -1.240431478 #>  [69,]  1.44298883  1.35681508  0.667817636 -0.288967928 #>  [70,]  1.13127794  0.43255917 -0.638485484 -1.240491406 #>  [71,]  1.02735206  0.17244295 -0.872756845 -1.166506964 #>  [72,]  0.65518188 -0.56202110 -1.065121575 -0.180631805 #>  [73,] -0.55530913 -0.82043533  1.157501536  0.010042456 #>  [74,] -0.10623996 -1.10480991  0.321549744  1.057607465 #>  [75,]  1.17087088  0.53797535 -0.524741820 -1.228194465 #>  [76,]  0.94051969 -0.02647005 -1.001991648 -1.010918960 #>  [77,]  0.33499040 -0.94738062 -0.647976716  0.744049847 #>  [78,]  0.33792893 -0.94488073 -0.653431148  0.737485486 #>  [79,] -1.12520836  0.18622783  0.912175991 -1.439918723 #>  [80,] -0.08072879 -1.10750135  0.263040509  1.078943035 #>  [81,]  1.50674216  1.57246952  1.061232438  0.209710754 #>  [82,] -1.52219167  1.31429598 -0.818909844  0.173890701 #>  [83,] -1.23222963  0.45583058  0.598568997 -1.356825823 #>  [84,] -0.25007300 -1.06254913  0.638789925  0.849270463 #>  [85,]  0.22682325 -1.02603719 -0.432836694  0.949097922 #>  [86,] -1.07962797  0.07913888  1.015378433 -1.419321008 #>  [87,]  0.35947926 -0.92596034 -0.692711959  0.687867403 #>  [88,]  0.81716954 -0.28020609 -1.091925282 -0.690546620 #>  [89,] -1.49166947  1.21512565 -0.626921620 -0.100429305 #>  [90,]  0.98357758  0.07006966 -0.945118160 -1.097051063 #>  [91,]  1.46359652  1.42553470  0.789917477 -0.141508516 #>  [92,] -1.57503564  1.49089140 -1.177040909  0.724983065 #>  [93,]  0.74178161 -0.41862087 -1.098255175 -0.459755041 #>  [94,]  1.40260746  1.22489577  0.442268520 -0.542098349 #>  [95,]  0.83346132 -0.24863285 -1.085913879 -0.737725661 #>  [96,] -1.13201635  0.20261949  0.895250377 -1.440369537 #>  [97,] -1.08208547  0.08479481  1.010256401 -1.421176628 #>  [98,] -0.40349907 -0.96675255  0.934652425  0.481101241 #>  [99,] -0.15712442 -1.09511867  0.436698387  1.000668287 #> [100,] -0.15186541 -1.09638711  0.424915332  1.007427714 #> [101,] -1.12880473  0.19487398  0.903284591 -1.440245707 #> [102,] -0.67047118 -0.67525035  1.263605226 -0.381459080 #> [103,]  1.27744060  0.83903896 -0.146451207 -1.057417931 #> [104,] -0.82699075 -0.43063802  1.297661040 -0.894172977 #> [105,]  0.63008899 -0.60045562 -1.048120587 -0.099168430 #> [106,]  1.22833692  0.69718120 -0.334173342 -1.163006980 #> [107,]  1.06101933  0.25407836 -0.806726101 -1.205629374 #> [108,] -1.16201188  0.27606766  0.815883566 -1.433614522 #> [109,] -0.09364472 -1.10631962  0.292714651  1.068750127 #> [110,]  0.75980740 -0.38667477 -1.099858563 -0.516449072 #> [111,] -0.79357610 -0.48743356  1.302302818 -0.790789103 #> [112,]  0.37848838 -0.90841366 -0.726265240  0.642012343 #> [113,] -0.45311172 -0.92457337  1.016449178  0.336251114 #> [114,]  0.39072458 -0.89669368 -0.747294397  0.611503658 #> [115,] -0.29241714 -1.04134086  0.725954869  0.761307601 #> [116,] -0.99270828 -0.11226753  1.165443838 -1.305683417 #> [117,]  0.80977540 -0.29434106 -1.094093853 -0.668761290 #> [118,] -0.13643882 -1.09975304  0.390182334  1.026100587 #> [119,] -1.38353285  0.88045078 -0.030643680 -0.838829095 #> [120,]  0.93937908 -0.02897134 -1.003311060 -1.008422776 #> [121,] -1.39316854  0.90921707 -0.078621273 -0.786748983 #> [122,] -1.63891794  1.71266722 -1.654950359  1.530343281 #> [123,] -0.50504848 -0.87455322  1.093088982  0.174387218 #> [124,] -0.59642059 -0.77199147  1.202365300 -0.128307146 #> [125,]  0.14667389 -1.06753535 -0.259086085  1.050655920 #> [126,]  0.26475617 -1.00141596 -0.511217687  0.885634069 #> [127,] -0.89412093 -0.30902965  1.266854303 -1.084677146 #> [128,] -1.49048125  1.21130688 -0.619663615 -0.110486195 #> [129,]  1.50296284  1.55943340  1.036607294  0.176569166 #> [130,] -1.51110777  1.27804344 -0.747949773  0.070675015 #> [131,] -0.40861697 -0.96265470  0.943450300  0.466659263 #> [132,] -0.72120334 -0.60193310  1.289687278 -0.553806878 #> [133,] -1.43647668  1.04105852 -0.306549729 -0.520619033 #> [134,] -0.22349487 -1.07382385  0.582356176  0.898580818 #> [135,]  1.08233496  0.30706720 -0.760107229 -1.223257117 #> [136,] -0.99284361 -0.11198259  1.165255871 -1.305926380 #> [137,]  0.86616843 -0.18346479 -1.068607616 -0.828583415 #> [138,]  1.12223342  0.40896732 -0.662519202 -1.239890016 #> [139,]  1.35677779  1.07957147  0.207739947 -0.775476841 #> [140,] -1.66898009  1.82017251 -1.897411554  1.966017916 #> [141,]  1.56256430  1.76871845  1.444598385  0.755336747 #> [142,] -1.15915714  0.26899128  0.823776893 -1.434888990 #> [143,] -0.24782937 -1.06356161  0.634074227  0.853612709 #> [144,]  0.05096610 -1.09837240 -0.041749224  1.110466040 #> [145,] -1.43777415  1.04507273 -0.313692516 -0.511810364 #> [146,]  0.61290844 -0.62596324 -1.034682696 -0.043607051 #> [147,]  1.36995559  1.12087934  0.272880096 -0.713981120 #> [148,] -0.12504951 -1.10189843  0.364390102  1.038772526 #> [149,] -1.62343001  1.65806532 -1.534466153  1.320377283 #> [150,]  0.08808247 -1.08883187 -0.126921390  1.095434812 #> [151,] -0.49475853 -0.88494000  1.078685269  0.207177855 #> [152,] -1.34562871  0.76929601  0.148637743 -1.019872461 #> [153,] -1.67087448  1.82701438 -1.913074409  1.994744419 #> [154,] -0.23977957 -1.06710211  0.617080082  0.868921371 #> [155,]  0.46144299 -0.82243499 -0.859331454  0.421367166 #> [156,]  0.22182897 -1.02904043 -0.422311983  0.956736832 #> [157,] -1.52863529  1.33549694 -0.860818278  0.235819215 #> [158,]  1.72155767  2.36565814  2.747714670  2.955403082 #> [159,] -0.26600809 -1.05503594  0.672010891  0.817495578 #> [160,]  0.21628177 -1.03231113 -0.410569804  0.965022081 #> [161,]  1.11175145  0.38185361 -0.689481003 -1.237687905 #> [162,] -0.16957248 -1.09187117  0.464462761  0.983877871 #> [163,]  1.24928891  0.75705439 -0.256938613 -1.123915526 #> [164,]  0.89595006 -0.12205612 -1.046578893 -0.906090917 #> [165,]  1.48219127  1.48835245  0.904222721  0.002649877 #> [166,] -1.44580676  1.07000791 -0.358325220 -0.456160322 #> [167,] -1.55821920  1.43402003 -1.059482430  0.538765245 #> [168,] -0.53286518 -0.84529600  1.129987414  0.084213522 #> [169,] -1.71847377  2.00154562 -2.321806013  2.767920323 #> [170,]  0.62049400 -0.61478205 -1.040792714 -0.068107575 #> [171,]  0.36468472 -0.92123526 -0.702004759  0.675500954 #> [172,] -1.31583651  0.68417247  0.279174965 -1.136776200 #> [173,]  1.20630868  0.63528534 -0.410864245 -1.195033499 #> [174,]  1.45104971  1.38358289  0.715008795 -0.232800933 #> [175,] -0.84550198 -0.39810519  1.292090308 -0.949233520 #> [176,] -0.78259244 -0.50556042  1.302346316 -0.755833284 #> [177,] -0.51730000 -0.86187931  1.109712770  0.134933483 #> [178,]  0.90783921 -0.09699019 -1.036068275 -0.935450305 #> [179,] -0.32830171 -1.02024616  0.796805258  0.678209729 #> [180,] -1.01693578 -0.06060504  1.129568388 -1.346124163 #> [181,]  0.30594669 -0.97105603 -0.592862067  0.806232956 #> [182,]  0.34372650 -0.93989224 -0.664124351  0.724390968 #> [183,] -1.48840476  1.20464088 -0.607018355 -0.127951356 #> [184,]  1.03253557  0.18484759 -0.863187472 -1.173384092 #> [185,]  0.92386316 -0.06270944 -1.020319502 -0.973453838 #> [186,]  1.15906169  0.50616853 -0.560137208 -1.234488344 #> [187,] -1.69823973  1.92673819 -2.144469014  2.427009208 #> [188,]  0.34950321 -0.93484735 -0.674687912  0.711156268 #> [189,] -0.08676831 -1.10699496  0.276928399  1.074332737 #> [190,] -0.37418957 -0.98909827  0.882775381  0.561393808 #> [191,] -0.62244076 -0.73938800  1.226859487 -0.216990033 #> [192,] -1.51636425  1.29520194 -0.781424777  0.119106012 #> [193,] -0.37906993 -0.98551004  0.891585358  0.548317837 #> [194,]  0.99660108  0.10008173 -0.925150592 -1.119755053 #> [195,]  0.75627569 -0.39299073 -1.099694728 -0.505401825 #> [196,] -1.44982854  1.08254639 -0.380939296 -0.427569954 #> [197,] -0.27868071 -1.04865781  0.698076015  0.791074178 #> [198,] -1.48228973  1.18506594 -0.570063919 -0.178576383 #> [199,]  0.32518504 -0.95558338 -0.629611124  0.765595721 #> [200,]  0.56899191 -0.68818146 -0.993988192  0.096778274 #> attr(,\"coefs\") #> attr(,\"coefs\")$alpha #> [1] 0.4989729 0.4723856 0.5162145 0.5139908 #>  #> attr(,\"coefs\")$norm2 #> [1]   1.00000000 200.00000000  16.58458087   1.11767200   0.07007317 #> [6]   0.00429851 #>  #> attr(,\"degree\") #> [1] 1 2 3 4 #> attr(,\"class\") #> [1] \"poly\"   \"matrix\" data_gen(\"all\", n = 200) #> # A tibble: 2,602 × 3 #>           x       y structure #>       <dbl>   <dbl> <chr>     #>  1  0.227    0.255  linear    #>  2  1.05     1.04   linear    #>  3  0.448    0.465  linear    #>  4 -1.34    -1.33   linear    #>  5  1.60     1.58   linear    #>  6  1.47     1.46   linear    #>  7  0.815    0.777  linear    #>  8  0.560    0.558  linear    #>  9 -0.00611  0.0204 linear    #> 10 -1.55    -1.57   linear    #> # ℹ 2,592 more rows"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distanceDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Collecting all pairwise distances between input planes. — distanceDist","title":"Collecting all pairwise distances between input planes. — distanceDist","text":"distribution pairwise distances useful understand optimisation guided tour, compare e.g. different optimisation methods different number noise dimensions.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distanceDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collecting all pairwise distances between input planes. — distanceDist","text":"","code":"distanceDist(planes, nn = FALSE)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distanceDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collecting all pairwise distances between input planes. — distanceDist","text":"planes Input planes (e.g. result guided tour) nn Set true consider nearest neighbour distances (dummy, yet implemented)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distanceDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collecting all pairwise distances between input planes. — distanceDist","text":"numeric vector containing distances","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distanceDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collecting all pairwise distances between input planes. — distanceDist","text":"","code":"planes1 <- purrr::rerun(10, tourr::basis_random(5)) #> Warning: `rerun()` was deprecated in purrr 1.0.0. #> ℹ Please use `map()` instead. #>   # Previously #>   rerun(10, tourr::basis_random(5)) #>  #>   # Now #>   map(1:10, ~ tourr::basis_random(5)) planes2 <- purrr::rerun(10, tourr::basis_random(10)) #> Warning: `rerun()` was deprecated in purrr 1.0.0. #> ℹ Please use `map()` instead. #>   # Previously #>   rerun(10, tourr::basis_random(10)) #>  #>   # Now #>   map(1:10, ~ tourr::basis_random(10)) d1 <- distanceDist(planes1) d2 <- distanceDist(planes2) d <- tibble::tibble(dist=c(d1, d2), dim=c(rep(5,length(d1)),rep(10,length(d2)))) ggplot2::ggplot(d) + ggplot2::geom_boxplot(ggplot2::aes(factor(dim), dist))"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distanceToSp.html","id":null,"dir":"Reference","previous_headings":"","what":"Collecting distances between input planes and input special plane. — distanceToSp","title":"Collecting distances between input planes and input special plane. — distanceToSp","text":"optimal view known, can use distance given plane optimal one proxy diagnose performance guided tour.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distanceToSp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collecting distances between input planes and input special plane. — distanceToSp","text":"","code":"distanceToSp(planes, specialPlane)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distanceToSp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collecting distances between input planes and input special plane. — distanceToSp","text":"planes Input planes (e.g. result guided tour) specialPlane Plane defining optimal view","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distanceToSp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collecting distances between input planes and input special plane. — distanceToSp","text":"numeric vector containing distances","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distanceToSp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collecting distances between input planes and input special plane. — distanceToSp","text":"","code":"planes <- purrr::rerun(10, tourr::basis_random(5)) specialPlane <- basisMatrix(1,2,5) d <- distanceToSp(planes, specialPlane) plot(d)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distance_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Collecting all pairwise distances between input planes. — distance_dist","title":"Collecting all pairwise distances between input planes. — distance_dist","text":"distribution pairwise distances useful understand optimisation guided tour, compare e.g. different optimisation methods different number noise dimensions.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distance_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collecting all pairwise distances between input planes. — distance_dist","text":"","code":"distance_dist(planes, nn = FALSE)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distance_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collecting all pairwise distances between input planes. — distance_dist","text":"planes Input planes (e.g. result guided tour) nn Set true consider nearest neighbour distances (dummy, yet implemented)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distance_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collecting all pairwise distances between input planes. — distance_dist","text":"numeric vector containing distances","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distance_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collecting all pairwise distances between input planes. — distance_dist","text":"","code":"planes1 <- purrr::rerun(10, tourr::basis_random(5)) #> Warning: `rerun()` was deprecated in purrr 1.0.0. #> ℹ Please use `map()` instead. #>   # Previously #>   rerun(10, tourr::basis_random(5)) #>  #>   # Now #>   map(1:10, ~ tourr::basis_random(5)) planes2 <- purrr::rerun(10, tourr::basis_random(10)) #> Warning: `rerun()` was deprecated in purrr 1.0.0. #> ℹ Please use `map()` instead. #>   # Previously #>   rerun(10, tourr::basis_random(10)) #>  #>   # Now #>   map(1:10, ~ tourr::basis_random(10)) d1 <- distance_dist(planes1) d2 <- distance_dist(planes2) d <- tibble::tibble(dist=c(d1, d2), dim=c(rep(5,length(d1)),rep(10,length(d2)))) ggplot2::ggplot(d) + ggplot2::geom_boxplot(ggplot2::aes(factor(dim), dist))"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distance_to_sp.html","id":null,"dir":"Reference","previous_headings":"","what":"Collecting distances between input planes and input special plane. — distance_to_sp","title":"Collecting distances between input planes and input special plane. — distance_to_sp","text":"optimal view known, can use distance given plane optimal one proxy diagnose performance guided tour.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distance_to_sp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collecting distances between input planes and input special plane. — distance_to_sp","text":"","code":"distance_to_sp(planes, special_plane)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distance_to_sp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collecting distances between input planes and input special plane. — distance_to_sp","text":"planes Input planes (e.g. result guided tour) special_plane Plane defining optimal view","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distance_to_sp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collecting distances between input planes and input special plane. — distance_to_sp","text":"numeric vector containing distances","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/distance_to_sp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collecting distances between input planes and input special plane. — distance_to_sp","text":"","code":"planes <- purrr::rerun(10, tourr::basis_random(5)) special_plane <- basis_matrix(1,2,5) d <- distance_to_sp(planes, special_plane) plot(d)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/geodesic_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate information required to interpolate along a geodesic path between two frames. — geodesic_info","title":"Calculate information required to interpolate along a geodesic path between two frames. — geodesic_info","text":"methdology outlined http://www-stat.wharton.upenn.edu/~buja/PAPERS/paper-dyn-proj-algs.pdf http://www-stat.wharton.upenn.edu/~buja/PAPERS/paper-dyn-proj-math.pdf, code follows notation outlined papers:","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/geodesic_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate information required to interpolate along a geodesic path between two frames. — geodesic_info","text":"","code":"geodesic_info(Fa, Fz, epsilon = 1e-06)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/geodesic_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate information required to interpolate along a geodesic path between two frames. — geodesic_info","text":"Fa starting frame, orthonormalised necessary Fz target frame, orthonormalised necessary epsilon epsilon used determine angle effectively equal 0","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/geodesic_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate information required to interpolate along a geodesic path between two frames. — geodesic_info","text":"p = dimension data d = target dimension F = frame, orthonormal p x d matrix Fa = starting frame, Fz = target frame Fa'Fz = Va lamda  Vz' (svd) Ga = Fa Va, Gz = Fz Vz tau = principle angles","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/getIndexMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate mean index value over n jittered views. — getIndexMean","title":"Evaluate mean index value over n jittered views. — getIndexMean","text":"Evaluate mean index value n jittered views.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/getIndexMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate mean index value over n jittered views. — getIndexMean","text":"","code":"getIndexMean(proj, d, alpha, idx, method = \"jitterAngle\", n = 10)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/getIndexMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate mean index value over n jittered views. — getIndexMean","text":"proj Original projection plane d Data matrix alpha Jitter amount (jittering angle points) idx Index function method Select \"jitterAngle\" (default) \"jitterPoints\" (otherwise return original index value) n Number evaluations entering mean value calculation","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/getIndexMean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate mean index value over n jittered views. — getIndexMean","text":"Mean index value","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/getTrace.html","id":null,"dir":"Reference","previous_headings":"","what":"Tracing the index over an interpolated planned tour path. — getTrace","title":"Tracing the index over an interpolated planned tour path. — getTrace","text":"Tracing used test index value varies smoothly interpolated tour path. index value calculated data d projection interpolated sequence. Note index functions must take data 2-d matrix format return index value.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/getTrace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tracing the index over an interpolated planned tour path. — getTrace","text":"","code":"getTrace(d, m, indexList, indexLabels)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/getTrace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tracing the index over an interpolated planned tour path. — getTrace","text":"d data m list projection matrices planned tour indexList list index functions calculate entry indexLabels labels used output","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/getTrace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tracing the index over an interpolated planned tour path. — getTrace","text":"index values interpolation step","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/getTrace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tracing the index over an interpolated planned tour path. — getTrace","text":"","code":"d <- spiralData(4, 100) m <- list(basisMatrix(1,2,4), basisMatrix(3,4,4)) indexList <- list(tourr::holes(), tourr::cmass()) indexLabels <- c(\"holes\", \"cmass\") trace <- getTrace(d, m, indexList, indexLabels) plotTrace(trace)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/get_index_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate mean index value over n jittered views. — get_index_mean","title":"Evaluate mean index value over n jittered views. — get_index_mean","text":"Evaluate mean index value n jittered views.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/get_index_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate mean index value over n jittered views. — get_index_mean","text":"","code":"get_index_mean(proj, d, alpha, idx, method = \"jitter_angle\", n = 10)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/get_index_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate mean index value over n jittered views. — get_index_mean","text":"proj Original projection plane d Data matrix alpha Jitter amount (jittering angle points) idx Index function method Select \"jitterAngle\" (default) \"jitterPoints\" (otherwise return original index value) n Number evaluations entering mean value calculation","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/get_index_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate mean index value over n jittered views. — get_index_mean","text":"Mean index value","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/get_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Tracing the index over an interpolated planned tour path. — get_trace","title":"Tracing the index over an interpolated planned tour path. — get_trace","text":"Tracing used test index value varies smoothly interpolated tour path. index value calculated data d projection interpolated sequence. Note index functions must take data 2-d matrix format return index value.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/get_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tracing the index over an interpolated planned tour path. — get_trace","text":"","code":"get_trace(d, m, index_list, index_labels)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/get_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tracing the index over an interpolated planned tour path. — get_trace","text":"d data m list projection matrices planned tour index_list list index functions calculate entry index_labels labels used output","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/get_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tracing the index over an interpolated planned tour path. — get_trace","text":"index values interpolation step","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/get_trace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tracing the index over an interpolated planned tour path. — get_trace","text":"","code":"d <- spiral_data(100, 4) m <- list(basis_matrix(1,2,4), basis_matrix(3,4,4)) index_list <- list(tourr::holes(), tourr::cmass()) index_labels <- c(\"holes\", \"cmass\") trace <- get_trace(d, m, index_list, index_labels) #> Converting input data to the required matrix format. plot_trace(trace)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitterAngle.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-evaluate index after jittering the projection by an angle alpha. — jitterAngle","title":"Re-evaluate index after jittering the projection by an angle alpha. — jitterAngle","text":"Re-evaluate index jittering projection angle alpha.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitterAngle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-evaluate index after jittering the projection by an angle alpha. — jitterAngle","text":"","code":"jitterAngle(proj, d, alpha, idx)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitterAngle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-evaluate index after jittering the projection by an angle alpha. — jitterAngle","text":"proj Original projection plane d Data matrix alpha Jitter angle idx Index function","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitterAngle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-evaluate index after jittering the projection by an angle alpha. — jitterAngle","text":"New index value","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitterPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-evaluate index after jittering all points by an amount alpha. — jitterPoints","title":"Re-evaluate index after jittering all points by an amount alpha. — jitterPoints","text":"Re-evaluate index jittering points amount alpha.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitterPoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-evaluate index after jittering all points by an amount alpha. — jitterPoints","text":"","code":"jitterPoints(projData, alpha, idx)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitterPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-evaluate index after jittering all points by an amount alpha. — jitterPoints","text":"projData Original projected data points alpha Jitter amount (passed jitter() function) idx Index function","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitterPoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-evaluate index after jittering all points by an amount alpha. — jitterPoints","text":"New index value","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitter_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-evaluate index after jittering the projection by an angle alpha. — jitter_angle","title":"Re-evaluate index after jittering the projection by an angle alpha. — jitter_angle","text":"Re-evaluate index jittering projection angle alpha.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitter_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-evaluate index after jittering the projection by an angle alpha. — jitter_angle","text":"","code":"jitter_angle(proj, d, alpha, idx)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitter_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-evaluate index after jittering the projection by an angle alpha. — jitter_angle","text":"proj Original projection plane d Data matrix alpha Jitter angle idx Index function","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitter_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-evaluate index after jittering the projection by an angle alpha. — jitter_angle","text":"New index value","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitter_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-evaluate index after jittering all points by an amount alpha. — jitter_points","title":"Re-evaluate index after jittering all points by an amount alpha. — jitter_points","text":"Re-evaluate index jittering points amount alpha.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitter_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-evaluate index after jittering all points by an amount alpha. — jitter_points","text":"","code":"jitter_points(proj_data, alpha, idx)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitter_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-evaluate index after jittering all points by an amount alpha. — jitter_points","text":"proj_data Original projected data points alpha Jitter amount (passed jitter() function) idx Index function","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/jitter_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-evaluate index after jittering all points by an amount alpha. — jitter_points","text":"New index value","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/noise_gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Synthetic Noise — noise_gen","title":"Generate Synthetic Noise — noise_gen","text":"Generate Synthetic Noise","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/noise_gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Synthetic Noise — noise_gen","text":"","code":"noise_gen(n = 500, type = \"gaussian\", level = 0.01, seed = NULL)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/noise_gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Synthetic Noise — noise_gen","text":"n Integer. Number samples generate. Default 500. type Character string specifying type noise generate. Supported types: \"gaussian\": Standard normal distribution. \"uniform\": Uniform distribution -level +level. \"lognormal\": Log-normal distribution. \"t_distributed\": Heavy-tailed t-distribution 3 degrees freedom. \"cauchy\": Extremely heavy-tailed Cauchy distribution. \"beta_noise\": Beta distribution shifted scaled [-level, level]. \"exponential\": Positive-exponential distribution. \"microstructure\": Oscillatory sinusoidal pattern additive Gaussian noise. level Numeric. Controls scale (standard deviation, range, spread) noise. Default 0.01. seed Optional integer. Sets random seed reproducibility.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/noise_gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Synthetic Noise — noise_gen","text":"tibble two columns: value: Numeric vector generated noise samples. type: Character string indicating type noise.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/noise_gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Synthetic Noise — noise_gen","text":"","code":"# Gaussian noise with small scale noise_gen(500, type = \"gaussian\", level = 0.05) #> # A tibble: 500 × 2 #>       value type     #>       <dbl> <chr>    #>  1  0.0512  gaussian #>  2 -0.00849 gaussian #>  3 -0.0437  gaussian #>  4  0.0120  gaussian #>  5 -0.00123 gaussian #>  6  0.0429  gaussian #>  7  0.0652  gaussian #>  8 -0.0194  gaussian #>  9 -0.00127 gaussian #> 10  0.0122  gaussian #> # ℹ 490 more rows  # Heavy-tailed noise noise_gen(500, type = \"t_distributed\", level = 0.1) #> # A tibble: 500 × 2 #>       value type          #>       <dbl> <chr>         #>  1  0.0125  t_distributed #>  2 -0.0363  t_distributed #>  3 -0.206   t_distributed #>  4  0.277   t_distributed #>  5 -0.257   t_distributed #>  6  0.231   t_distributed #>  7 -0.00622 t_distributed #>  8 -0.0497  t_distributed #>  9 -0.00742 t_distributed #> 10 -0.0302  t_distributed #> # ℹ 490 more rows"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/pipeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating a sample of points on a pipe — pipeData","title":"Generating a sample of points on a pipe — pipeData","text":"Points drawn uniform distribution -1 1, pipe structure generated rejecting points circle radius 1 thickness t last two parameters.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/pipeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating a sample of points on a pipe — pipeData","text":"","code":"pipeData(n, p, t = 0.1)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/pipeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating a sample of points on a pipe — pipeData","text":"n sample dimensionality p number sample points generate t thickness circle, default=0.1","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/pipeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating a sample of points on a pipe — pipeData","text":"sample points tibble format","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/pipeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating a sample of points on a pipe — pipeData","text":"","code":"pipeData(4, 100) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> # A tibble: 100 × 4 #>       ...1    ...2    ...3   ...4 #>      <dbl>   <dbl>   <dbl>  <dbl> #>  1 -0.247   0.0945 -0.667  -0.790 #>  2 -0.0730 -0.346   0.471  -0.856 #>  3  0.397   0.701   0.156  -0.959 #>  4  0.158  -0.0337  0.754  -0.618 #>  5 -0.507  -0.324   0.142  -0.980 #>  6  0.103  -0.371   0.366  -0.895 #>  7  0.371  -0.560   0.0596 -0.989 #>  8 -0.311  -0.443  -0.244  -0.996 #>  9 -0.912   0.711  -0.916   0.256 #> 10  0.577   0.777   0.991  -0.140 #> # ℹ 90 more rows pipeData(2, 100, 0.5) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> # A tibble: 100 × 2 #>       ...1   ...2 #>      <dbl>  <dbl> #>  1  0.0482 -0.762 #>  2  0.683  -0.315 #>  3  0.591  -0.575 #>  4 -0.675  -0.292 #>  5  0.187  -0.792 #>  6  0.570  -0.699 #>  7 -0.924  -0.427 #>  8 -0.732   0.820 #>  9  0.170   0.752 #> 10 -0.217  -0.894 #> # ℹ 90 more rows"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/pipe_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating a sample of points on a pipe — pipe_data","title":"Generating a sample of points on a pipe — pipe_data","text":"Points drawn uniform distribution -1 1, pipe structure generated rejecting points circle radius 1 thickness t last two parameters.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/pipe_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating a sample of points on a pipe — pipe_data","text":"","code":"pipe_data(n, p, t = 0.1)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/pipe_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating a sample of points on a pipe — pipe_data","text":"n number sample points generate p sample dimensionality t thickness circle, default=0.1","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/pipe_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating a sample of points on a pipe — pipe_data","text":"sample points tibble format","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/pipe_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating a sample of points on a pipe — pipe_data","text":"","code":"pipe_data(100, 4) #> # A tibble: 100 × 4 #>         V1      V2      V3     V4 #>      <dbl>   <dbl>   <dbl>  <dbl> #>  1  0.0376  0.0422 -0.667  -0.790 #>  2  0.212  -0.398   0.471  -0.856 #>  3  0.682   0.648   0.156  -0.959 #>  4  0.443  -0.0859  0.754  -0.618 #>  5 -0.221  -0.376   0.142  -0.980 #>  6  0.388  -0.423   0.366  -0.895 #>  7  0.656  -0.613   0.0596 -0.989 #>  8 -0.0257 -0.495  -0.244  -0.996 #>  9 -0.627   0.658  -0.916   0.256 #> 10  0.862   0.725   0.991  -0.140 #> # ℹ 90 more rows pipe_data(100, 2, 0.5) #> # A tibble: 100 × 2 #>         V1     V2 #>      <dbl>  <dbl> #>  1  0.0772 -0.716 #>  2  0.712  -0.269 #>  3  0.620  -0.529 #>  4 -0.646  -0.245 #>  5  0.216  -0.746 #>  6  0.599  -0.653 #>  7 -0.895  -0.381 #>  8 -0.703   0.866 #>  9  0.199   0.798 #> 10 -0.188  -0.848 #> # ℹ 90 more rows"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotRotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rotation traces of indexes obtained with profileRotation. — plotRotation","title":"Plot rotation traces of indexes obtained with profileRotation. — plotRotation","text":"Plot rotation traces indexes obtained profileRotation.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotRotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rotation traces of indexes obtained with profileRotation. — plotRotation","text":"","code":"plotRotation(resMat)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotRotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rotation traces of indexes obtained with profileRotation. — plotRotation","text":"resMat data (result profileRotation)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotRotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot rotation traces of indexes obtained with profileRotation. — plotRotation","text":"ggplot visualisation tracing data","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotSmoothingComparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the comparison of smoothing methods. — plotSmoothingComparison","title":"Plot the comparison of smoothing methods. — plotSmoothingComparison","text":"Plotting method results compareSmoothing. results mapped facetting values alpha mapping method (jitterAngle, jitterPoints, noSmoothing) linestyle color (black dashed, black dotted, red solid). default legend drawing turned , can turned via lPos argument, e.g. setting \"bottom\" legend plot.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotSmoothingComparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the comparison of smoothing methods. — plotSmoothingComparison","text":"","code":"plotSmoothingComparison(smMat, lPos = \"none\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotSmoothingComparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the comparison of smoothing methods. — plotSmoothingComparison","text":"smMat Result compareSmoothing lPos Legend position passed ggplot2 (default none legend shown)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotSmoothingComparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the comparison of smoothing methods. — plotSmoothingComparison","text":"ggplot visualisation comparison","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotTrace.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot traces of indexes obtained with getTrace. — plotTrace","title":"Plot traces of indexes obtained with getTrace. — plotTrace","text":"Plot traces indexes obtained getTrace.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotTrace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot traces of indexes obtained with getTrace. — plotTrace","text":"","code":"plotTrace(resMat, rescY = TRUE)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotTrace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot traces of indexes obtained with getTrace. — plotTrace","text":"resMat data (result getTrace) rescY bool fix y axis range [0,1]","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plotTrace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot traces of indexes obtained with getTrace. — plotTrace","text":"ggplot visualisation tracing data","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_rotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rotation traces of indexes obtained with profileRotation. — plot_rotation","title":"Plot rotation traces of indexes obtained with profileRotation. — plot_rotation","text":"Plot rotation traces indexes obtained profileRotation.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_rotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rotation traces of indexes obtained with profileRotation. — plot_rotation","text":"","code":"plot_rotation(res_mat)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_rotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rotation traces of indexes obtained with profileRotation. — plot_rotation","text":"res_mat data (result profileRotation)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_rotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot rotation traces of indexes obtained with profileRotation. — plot_rotation","text":"ggplot visualisation tracing data","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_smoothing_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the comparison of smoothing methods. — plot_smoothing_comparison","title":"Plot the comparison of smoothing methods. — plot_smoothing_comparison","text":"Plotting method results compareSmoothing. results mapped facetting values alpha mapping method (jitter_angle, jitter_points, no_smoothing) linestyle color (black dashed, black dotted, red solid). default legend drawing turned , can turned via lPos argument, e.g. setting \"bottom\" legend plot.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_smoothing_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the comparison of smoothing methods. — plot_smoothing_comparison","text":"","code":"plot_smoothing_comparison(sm_mat, lPos = \"none\")"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_smoothing_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the comparison of smoothing methods. — plot_smoothing_comparison","text":"sm_mat Result compare_smoothing lPos Legend position passed ggplot2 (default none legend shown)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_smoothing_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the comparison of smoothing methods. — plot_smoothing_comparison","text":"ggplot visualisation comparison","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot traces of indexes obtained with get_trace. — plot_trace","title":"Plot traces of indexes obtained with get_trace. — plot_trace","text":"Plot traces indexes obtained get_trace.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot traces of indexes obtained with get_trace. — plot_trace","text":"","code":"plot_trace(res_mat, rescY = TRUE)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot traces of indexes obtained with get_trace. — plot_trace","text":"res_mat data (result get_trace) rescY bool fix y axis range [0,1]","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/plot_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot traces of indexes obtained with get_trace. — plot_trace","text":"ggplot visualisation tracing data","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate and Summarize Projection Pursuit Index (PPI) Values — ppi_mean","title":"Simulate and Summarize Projection Pursuit Index (PPI) Values — ppi_mean","text":"Simulate Summarize Projection Pursuit Index (PPI) Values","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate and Summarize Projection Pursuit Index (PPI) Values — ppi_mean","text":"","code":"ppi_mean(data, index_fun, n_sim = 100, n_obs = 300)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate and Summarize Projection Pursuit Index (PPI) Values — ppi_mean","text":"data data frame matrix. Must least two columns. index_fun function taking two numeric vectors (x, y) returning scalar index. n_sim Integer. Number simulations. Default 100. n_obs Integer. Number observations sample simulation. Default 300.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate and Summarize Projection Pursuit Index (PPI) Values — ppi_mean","text":"tibble : var_i, var_j: Names variable pairs mean_index: Mean index value simulations","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate and Summarize Projection Pursuit Index (PPI) Values — ppi_mean","text":"","code":"data <- as.data.frame(data_gen(type = \"polynomial\", degree = 2)) ppi_mean(data, scag_index(\"stringy\"), n_sim = 10) #> # A tibble: 1 × 3 #>   var_i var_j mean_index #>   <chr> <chr>      <dbl> #> 1 1     2              1"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_noise_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the 95th Percentile of a Projection Pursuit Index Under Noise — ppi_noise_threshold","title":"Estimate the 95th Percentile of a Projection Pursuit Index Under Noise — ppi_noise_threshold","text":"function estimates 95th percentile projection pursuit index synthetic noise data.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_noise_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the 95th Percentile of a Projection Pursuit Index Under Noise — ppi_noise_threshold","text":"","code":"ppi_noise_threshold(   index_fun,   n_sim = 100,   n_obs = 500,   noise_type = \"gaussian\",   noise_level = 0.01,   seed = NULL )"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_noise_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the 95th Percentile of a Projection Pursuit Index Under Noise — ppi_noise_threshold","text":"index_fun function takes either 2-column matrix two numeric vectors returns scalar index. n_sim Integer. Number index evaluations simulate. Default 100. n_obs Integer. Number observations per noise sample. Default 500. noise_type Character. Type noise use (e.g., \"gaussian\", \"t_distributed\", etc.). Default \"gaussian\". noise_level Numeric. Controls scale/spread generated noise. Default 0.01. seed Optional integer. Random seed reproducibility.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_noise_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the 95th Percentile of a Projection Pursuit Index Under Noise — ppi_noise_threshold","text":"single numeric value: estimated 95th percentile index noise.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_noise_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the 95th Percentile of a Projection Pursuit Index Under Noise — ppi_noise_threshold","text":"","code":"ppi_noise_threshold(   index_fun = scag_index(\"stringy\"),   noise_type = \"cauchy\",   noise_level = 0.1,   n_sim = 10,   n_obs = 100 ) #>       95%  #> 0.7804348"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_samplesize_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Effect of Sample Size on Projection Pursuit Index Under Gaussian Noise — ppi_samplesize_effect","title":"Simulate Effect of Sample Size on Projection Pursuit Index Under Gaussian Noise — ppi_samplesize_effect","text":"given index function, simulates index behaves across range sample sizes applied pairs standard normal noise.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_samplesize_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Effect of Sample Size on Projection Pursuit Index Under Gaussian Noise — ppi_samplesize_effect","text":"","code":"ppi_samplesize_effect(index_fun, n_sim = 100)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_samplesize_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Effect of Sample Size on Projection Pursuit Index Under Gaussian Noise — ppi_samplesize_effect","text":"index_fun function taking two numeric vectors (x, y) returning scalar index. n_sim Integer. Number simulations per sample size. Default 100.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_samplesize_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Effect of Sample Size on Projection Pursuit Index Under Gaussian Noise — ppi_samplesize_effect","text":"tibble : sample_size: sample size used simulation block percentile95: 95th percentile index values simulations","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_samplesize_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Effect of Sample Size on Projection Pursuit Index Under Gaussian Noise — ppi_samplesize_effect","text":"","code":"ppi_samplesize_effect(scag_index(\"stringy\"), n_sim =1) #> # A tibble: 125 × 2 #>    sample_size percentile95 #>          <dbl>        <dbl> #>  1          30        0.818 #>  2          35        0.667 #>  3          40        0.654 #>  4          45        0.688 #>  5          50        0.567 #>  6          55        0.780 #>  7          60        0.75  #>  8          65        0.708 #>  9          70        0.706 #> 10          75        0.782 #> # ℹ 115 more rows"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate and Compare Index Scale on Structured vs Noisy Data — ppi_scale","title":"Simulate and Compare Index Scale on Structured vs Noisy Data — ppi_scale","text":"Performs simulations compute projection pursuit index structured (sampled) data random noise, allowing comparison index scale across contexts.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate and Compare Index Scale on Structured vs Noisy Data — ppi_scale","text":"","code":"ppi_scale(data, index_fun, n_sim = 100, n_obs = 500, seed = NULL)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate and Compare Index Scale on Structured vs Noisy Data — ppi_scale","text":"data data frame tibble least two numeric columns. index_fun function takes two numeric vectors (x, y) returns numeric scalar index. n_sim Integer. Number simulations. Default 100. n_obs Integer. Number observations per simulation. Default 500. seed Optional integer seed reproducibility.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate and Compare Index Scale on Structured vs Noisy Data — ppi_scale","text":"tibble columns: simulation: simulation number var_i, var_j: variable names var_pair: pair name string sigma: 0 structured data, 1 noisy data index: index value returned index_fun","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/ppi_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate and Compare Index Scale on Structured vs Noisy Data — ppi_scale","text":"","code":"ppi_scale(data_gen(\"polynomial\", degree = 3), scag_index(\"stringy\"), n_sim = 10) #> # A tibble: 60 × 6 #>    simulation var_i var_j var_pair sigma  index #>         <int> <chr> <chr> <chr>    <dbl>  <dbl> #>  1          1 1     2     1-2          0 NA     #>  2          1 1     2     1-2          1  0.744 #>  3          1 1     3     1-3          0  1     #>  4          1 1     3     1-3          1  0.715 #>  5          1 2     3     2-3          0  0.996 #>  6          1 2     3     2-3          1  0.745 #>  7          2 1     2     1-2          0 NA     #>  8          2 1     2     1-2          1  0.734 #>  9          2 1     3     1-3          0  1     #> 10          2 1     3     1-3          1  0.757 #> # ℹ 50 more rows"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/profileRotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Test rotation invariance of index functions for selected 2-d data set. — profileRotation","title":"Test rotation invariance of index functions for selected 2-d data set. — profileRotation","text":"Ideally projection pursuit index roation invariant, test explicitly profiling index rotating distribution.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/profileRotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test rotation invariance of index functions for selected 2-d data set. — profileRotation","text":"","code":"profileRotation(d, indexList, indexLabels, n = 200)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/profileRotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test rotation invariance of index functions for selected 2-d data set. — profileRotation","text":"d data (2 column matrix containing distribution rotated) indexList list index functions calculate entry indexLabels labels used output n number steps rotation (default = 200)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/profileRotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test rotation invariance of index functions for selected 2-d data set. — profileRotation","text":"index values rotation step","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/profileRotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test rotation invariance of index functions for selected 2-d data set. — profileRotation","text":"","code":"d <- as.matrix(sinData(2, 30)) #> New names: #> • `` -> `...1` #> • `` -> `...2` indexList <- list(tourr::holes(), scagIndex(\"stringy\"), mineIndexE(\"MIC\")) indexLabels <- c(\"holes\", \"stringy\", \"mic\") pRot <- profileRotation(d, indexList, indexLabels, n = 50) plotRotation(pRot)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/profile_rotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Test rotation invariance of index functions for selected 2-d data set. — profile_rotation","title":"Test rotation invariance of index functions for selected 2-d data set. — profile_rotation","text":"Ideally projection pursuit index roation invariant, test explicitly profiling index rotating distribution.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/profile_rotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test rotation invariance of index functions for selected 2-d data set. — profile_rotation","text":"","code":"profile_rotation(d, index_list, index_labels, n = 200)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/profile_rotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test rotation invariance of index functions for selected 2-d data set. — profile_rotation","text":"d data (2 column matrix containing distribution rotated) index_list list index functions calculate entry index_labels labels used output n number steps rotation (default = 200)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/profile_rotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test rotation invariance of index functions for selected 2-d data set. — profile_rotation","text":"index values rotation step","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/profile_rotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test rotation invariance of index functions for selected 2-d data set. — profile_rotation","text":"","code":"d <- as.matrix(sin_data(30, 2)) index_list <- list(tourr::holes(), scag_index(\"stringy\"), mine_indexE(\"MIC\")) index_labels <- c(\"holes\", \"stringy\", \"mic\") pRot <- profile_rotation(d, index_list, index_labels, n = 50) plot_rotation(pRot)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/scagIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Matching index functions to the required format. — scagIndex","title":"Matching index functions to the required format. — scagIndex","text":"convenicence functions format scagnostics mine index functions direct use guided tour functionalities package.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/scagIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matching index functions to the required format. — scagIndex","text":"","code":"scagIndex(indexName)  mineIndex(indexName)  mineIndexE(indexName)  holesR()  cmassR()"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/scagIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matching index functions to the required format. — scagIndex","text":"indexName Index name select group indexes.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/scagIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matching index functions to the required format. — scagIndex","text":"function taking 2-d data matrix returning index value","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/scagIndex.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Matching index functions to the required format. — scagIndex","text":"scagIndex(): Scagnostics index binostics package mineIndex(): MINE index minerva package mineIndexE(): MINE index minerva package (updated estimator) holesR(): rescaling tourr holes index cmassR(): rescaling tourr cmass index","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/scag_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Matching index functions to the required format. — scag_index","title":"Matching index functions to the required format. — scag_index","text":"convenicence functions format scagnostics mine index functions direct use guided tour functionalities package.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/scag_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matching index functions to the required format. — scag_index","text":"","code":"scag_index(index_name)  mine_index(index_name)  mine_indexE(index_name)  holesR()  cmassR()"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/scag_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matching index functions to the required format. — scag_index","text":"index_name Index name select group indexes.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/scag_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matching index functions to the required format. — scag_index","text":"function taking 2-d data matrix returning index value","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/scag_index.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Matching index functions to the required format. — scag_index","text":"scag_index(): Scagnostics index cassowaryr package mine_index(): MINE index minerva package mine_indexE(): MINE index minerva package (updated estimator) holesR(): rescaling tourr holes index cmassR(): rescaling tourr cmass index","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/sinData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating sine wave sample — sinData","title":"Generating sine wave sample — sinData","text":"n-1 points drawn normal distribution mean=0, sd=1, points final direction calculated sine values direction n-1 additional jittering controled jitter factor f.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/sinData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating sine wave sample — sinData","text":"","code":"sinData(n, p, f = 1)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/sinData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating sine wave sample — sinData","text":"n sample dimensionality p number sample points generate f jitter factor, default=1","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/sinData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating sine wave sample — sinData","text":"sample points tibble format","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/sinData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating sine wave sample — sinData","text":"","code":"sinData(4, 100) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> # A tibble: 100 × 4 #>      ...1    ...2   ...3   ...4 #>     <dbl>   <dbl>  <dbl>  <dbl> #>  1 -0.314  2.00   -0.652 -0.607 #>  2 -1.29  -0.382   0.810  0.725 #>  3  0.117 -1.67    0.721  0.660 #>  4  1.39  -0.420   0.802  0.719 #>  5 -0.182  0.435  -1.01  -0.848 #>  6 -0.668  2.18    1.02   0.851 #>  7  1.25  -0.0606  0.525  0.501 #>  8 -0.572 -0.196   0.729  0.667 #>  9  0.345  0.513  -0.174 -0.173 #> 10 -0.461 -0.0379  0.945  0.810 #> # ℹ 90 more rows sinData(2, 100, 200) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> # A tibble: 100 × 2 #>       ...1    ...2 #>      <dbl>   <dbl> #>  1  1.48    1.00   #>  2  0.734   0.681  #>  3 -2.57   -0.544  #>  4  0.242   0.201  #>  5 -0.0139  0.0103 #>  6 -1.10   -0.887  #>  7 -0.161  -0.144  #>  8  0.763   0.675  #>  9  1.72    0.982  #> 10  0.236   0.259  #> # ℹ 90 more rows"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/sin_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating sine wave sample — sin_data","title":"Generating sine wave sample — sin_data","text":"n-1 points drawn normal distribution mean=0, sd=1, points final direction calculated sine values direction n-1 additional jittering controled jitter factor f.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/sin_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating sine wave sample — sin_data","text":"","code":"sin_data(n, p, f = 1)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/sin_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating sine wave sample — sin_data","text":"n number sample points generate p sample dimensionality f jitter factor, default=1","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/sin_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating sine wave sample — sin_data","text":"sample points tibble format","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/sin_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating sine wave sample — sin_data","text":"","code":"sin_data(100, 4) #> # A tibble: 100 × 4 #>         V1     V2     V3     V4 #>      <dbl>  <dbl>  <dbl>  <dbl> #>  1 -0.452   1.92  -0.652 -0.607 #>  2 -1.43   -0.465  0.810  0.725 #>  3 -0.0211 -1.75   0.721  0.660 #>  4  1.25   -0.503  0.802  0.719 #>  5 -0.320   0.351 -1.01  -0.848 #>  6 -0.806   2.09   1.02   0.851 #>  7  1.11   -0.144  0.525  0.501 #>  8 -0.710  -0.280  0.729  0.667 #>  9  0.207   0.430 -0.174 -0.173 #> 10 -0.599  -0.121  0.945  0.810 #> # ℹ 90 more rows sin_data(100, 2, 200) #> # A tibble: 100 × 2 #>         V1      V2 #>      <dbl>   <dbl> #>  1  1.31    0.876  #>  2  0.563   0.554  #>  3 -2.74   -0.671  #>  4  0.0701  0.0734 #>  5 -0.185  -0.117  #>  6 -1.27   -1.01   #>  7 -0.333  -0.271  #>  8  0.591   0.547  #>  9  1.54    0.855  #> 10  0.0649  0.132  #> # ℹ 90 more rows"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spinebil-package.html","id":null,"dir":"Reference","previous_headings":"","what":"spinebil — spinebil-package","title":"spinebil — spinebil-package","text":"Functions evaluate performance projection pursuit index functions using tour methods.","code":""},{"path":[]},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spinebil-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"spinebil — spinebil-package","text":"Maintainer: Tina Rashid Jafari tina.rashidjafari@gmail.com (ORCID) Authors: Ursula Laa ursula.laa@boku.ac.(ORCID) Dianne Cook dicook@monash.edu (ORCID)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spiralData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating spiral sample — spiralData","title":"Generating spiral sample — spiralData","text":"n-2 points drawn normal distribution mean=0, sd=1, points final two direction sampled along spiral samping angle normal distribution mean=0, sd=2*pi (absolute values used fix orientation spiral).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spiralData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating spiral sample — spiralData","text":"","code":"spiralData(n, p)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spiralData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating spiral sample — spiralData","text":"n sample dimensionality p number sample points generate","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spiralData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating spiral sample — spiralData","text":"sample points matrix format","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spiralData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating spiral sample — spiralData","text":"","code":"spiralData(4, 100) #>           [,1]         [,2]         [,3]         [,4] #> v  0.895414770 -0.083443880  0.043714283  0.879345122 #> v  0.071710106  0.381153132 -0.110503754 -0.539855101 #> v -1.208123013  1.070491316 -0.958322124  0.319788089 #> v -0.355679369 -0.607559598  1.257445230 -0.416559948 #> v  1.698005341 -0.738201192  0.689241018 -0.154281265 #> v  0.242499160 -0.815162137 -0.392795408 -0.264170926 #> v -0.800868011 -0.624816542 -1.119438979  1.131557781 #> v -0.715843977 -1.270220440 -0.027219800  0.888045276 #> v -0.257891448 -3.679007212 -0.364455165  0.117578399 #> v -1.347365506 -0.219303683 -0.687680838 -0.902235814 #> v  1.300838235 -0.081009412 -0.406327633 -0.225895436 #> v -0.760981191  0.598869689 -0.162441574 -0.515749577 #> v -0.798239439 -1.854334763 -0.109341699 -0.540319602 #> v -0.131468357 -0.275069062  0.157950704  0.852571635 #> v -0.288595190  1.239788854  0.126778885  0.124314499 #> v -2.094046724 -1.119598880  0.996111385 -0.816481457 #> v  0.340152799 -0.071719307  0.589029431 -0.333357754 #> v  1.824705023 -0.355623825  0.775033615  1.234538191 #> v -0.848446432  1.851398173  0.080247943  0.204504477 #> v -0.436746841 -0.406965380 -0.348961565  0.855700739 #> v -1.094729165 -0.373391575  0.503665694 -0.423963642 #> v -0.598744490 -0.687464324  0.246711514 -0.560814894 #> v  1.915922545 -0.091923142  0.192228008 -0.572222765 #> v  0.056954758 -0.332564397  0.552406464 -0.376477272 #> v  0.711169746 -0.041989329  0.120937931  0.142029728 #> v -0.555164755  0.288005112 -0.030746685  0.266787882 #> v  1.018037114  0.211094863 -0.066874629  0.273029573 #> v  0.365928319 -1.396460628  0.113142974  0.016304110 #> v -0.910517697  0.386489849  0.114113712  0.017828309 #> v -0.804496233 -0.166540862  0.425986281 -0.482414999 #> v -0.536234042 -0.185539382  0.026861009  0.244675172 #> v -0.294871345  0.707342896 -0.028410444  0.266200200 #> v  0.569362231 -1.043773591 -0.791177363  0.577352105 #> v -1.093359385 -2.964031913  0.132119227  0.088473296 #> v  1.897274942  1.249561489 -0.388118996  0.074477765 #> v  0.780582140 -2.012543530  0.132049273  0.090448695 #> v  0.509920643 -0.725138620  0.115757679  0.153933931 #> v -0.419696344  0.659925163  0.183047069 -0.573630239 #> v -0.664609851  0.521602156 -0.404486599  0.033574780 #> v  0.093885864 -0.752119179 -0.264443349  0.220899038 #> v -0.812580829 -1.155860853 -0.035334848 -0.563874611 #> v  0.600409023  0.101221234  0.049228439 -0.577646708 #> v  0.341127654  0.683741185  0.124766999  0.039994443 #> v -0.291531797 -1.388678100 -0.199827160  0.254569238 #> v  0.030633075 -0.249335058  0.572436605 -0.353818256 #> v -0.036688552 -0.130230355  0.112531653  0.015372801 #> v -1.594664359 -2.434916235 -0.259710322 -0.449127592 #> v -0.135360703 -2.523981771  0.458277695 -0.460329937 #> v  0.908689684  1.631233186 -0.308115023 -0.401030198 #> v -0.115632837 -0.890795496 -0.380409315 -0.292154608 #> v  0.910630913 -0.029664633 -0.292590668  0.199730655 #> v -0.063772035  1.468654127 -0.720050242 -0.871535124 #> v  0.255570223  0.024299091  0.096555459  0.185443476 #> v  1.589806608  0.948880032 -0.425307322 -0.080333429 #> v -1.324115477 -1.603107928 -0.239724646 -1.154456315 #> v  0.252915526 -0.203602189 -0.310025593  0.184107557 #> v -0.086544252 -0.259015582 -0.060437756 -0.557165417 #> v -0.715312421  0.731111456 -0.174537223 -0.509126430 #> v  0.937127434 -1.015356369  0.092451394  0.190713819 #> v  1.103117171  0.292140255  1.150254435 -0.620908577 #> v  0.764505697 -0.377514384 -0.425540173 -0.107292102 #> v  1.388600824 -0.424895077 -0.218770505  0.246591555 #> v -1.419396315  0.692795974  1.222390685  0.700030771 #> v -0.003858885 -0.871392046 -0.020470609 -0.567262560 #> v -0.259155608 -1.473526736 -0.570458423  0.759434143 #> v -0.216946324 -0.471020663 -0.371547822  0.105991693 #> v -0.971953648  0.844885266 -0.390368998  0.069577180 #> v -0.533805581  0.926368708 -0.298061239  0.195055285 #> v -1.575998241  0.958101944  0.114916525  0.019133391 #> v  0.278616729  0.939134624 -0.320654075 -0.386168751 #> v  0.556841494 -0.642014236 -0.360555690 -0.329050209 #> v  0.749577500 -0.548980021  0.094568099  0.188041707 #> v  2.076907498  0.131077511 -0.252131289 -0.455575701 #> v  1.305320690  0.007253685 -0.361808624 -0.326936638 #> v  1.668426736 -1.316765063  0.713899372 -0.075094832 #> v  0.955897056  0.578969677  0.110357954  0.012225510 #> v -1.864518981  0.078841083 -0.177483260  0.262163763 #> v -0.145291622 -0.463711175  0.654189514  0.438084298 #> v  0.024409177 -0.890439725  0.087780892  0.196294836 #> v -0.516747178  0.398999144  0.727707153 -0.004354291 #> v -0.319483584 -0.639762156 -0.812840087  0.552413770 #> v -0.436491649  0.303567608  0.543189171  0.603743057 #> v  0.215418682  0.209324028 -0.016473852  0.262823681 #> v  0.558972939 -0.521812892  0.455020990 -0.462690907 #> v -0.323846498  0.436659883  0.724607262 -0.024017502 #> v  2.692515039 -1.861033697  0.605022164  0.522752936 #> v  0.737202133  1.518832777  0.115695657 -0.579508114 #> v  0.725283091  0.648490725 -0.380948457  0.845889720 #> v -0.110312948  1.444280315 -0.008081274  0.260060561 #> v -0.012173077 -1.588928185 -0.419780918 -0.027382351 #> v -0.354420614  0.420952386  0.473647577  0.674479720 #> v -0.445451455 -0.086206632  0.649772201 -0.240535100 #> v -0.677462097 -0.824404203  0.126039314  0.126975854 #> v -1.995084156 -1.239298910  0.091606825  0.191754112 #> v -0.816230818  1.020711732 -1.041451598 -0.209640097 #> v  1.154428245 -0.051759966 -0.055568076  0.271632737 #> v -0.303187060  0.156827019 -0.181757678  0.260857897 #> v  0.996510324 -1.901515646 -0.385304257  0.080365900 #> v  1.322971167 -1.826342700 -0.190943591 -0.499470061 #> v -1.276119338  0.983569482  1.274793843 -0.372800058"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spiral_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating spiral sample — spiral_data","title":"Generating spiral sample — spiral_data","text":"n-2 points drawn normal distribution mean=0, sd=1, points final two direction sampled along spiral samping angle normal distribution mean=0, sd=2*pi (absolute values used fix orientation spiral).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spiral_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating spiral sample — spiral_data","text":"","code":"spiral_data(n, p)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spiral_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating spiral sample — spiral_data","text":"n number sample points generate p sample dimensionality","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spiral_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating spiral sample — spiral_data","text":"sample points matrix format","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/spiral_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating spiral sample — spiral_data","text":"","code":"spiral_data(100, 4) #> # A tibble: 100 × 4 #>         V1      V2      V3     V4 #>      <dbl>   <dbl>   <dbl>  <dbl> #>  1  0.868   0.161   0.0437  0.879 #>  2  0.0444  0.625  -0.111  -0.540 #>  3 -1.24    1.31   -0.958   0.320 #>  4 -0.383  -0.363   1.26   -0.417 #>  5  1.67   -0.494   0.689  -0.154 #>  6  0.215  -0.571  -0.393  -0.264 #>  7 -0.828  -0.381  -1.12    1.13  #>  8 -0.743  -1.03   -0.0272  0.888 #>  9 -0.285  -3.43   -0.364   0.118 #> 10 -1.37    0.0250 -0.688  -0.902 #> # ℹ 90 more rows"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/squintAngleEstimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squintAngleEstimate","title":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squintAngleEstimate","text":"estimate squint angle interpolating random starting plane towards optimal view index value selected index function selected cutoff. Since depends direction, repeated n randomly selected planes giving distribution representative squint angle.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/squintAngleEstimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squintAngleEstimate","text":"","code":"squintAngleEstimate(   data,   indexF,   cutoff,   structurePlane,   n = 100,   stepSize = 0.01 )"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/squintAngleEstimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squintAngleEstimate","text":"data Input data indexF Index function cutoff Threshold index value assume structure visible structurePlane Plane defining optimal view n Number random starting planes (default = 100) stepSize Interpolation step size fixing accuracy (default = 0.01)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/squintAngleEstimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squintAngleEstimate","text":"numeric vector containing squint angle estimates","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/squintAngleEstimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squintAngleEstimate","text":"","code":"data <- spiralData(4, 50) indexF <- scagIndex(\"stringy\") cutoff <- 0.7 structurePlane <- basisMatrix(3,4,4) squintAngleEstimate(data, indexF, cutoff, structurePlane, n=1) #> [1] 0.844061"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/squint_angle_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squint_angle_estimate","title":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squint_angle_estimate","text":"estimate squint angle interpolating random starting plane towards optimal view index value selected index function selected cutoff. Since depends direction, repeated n randomly selected planes giving distribution representative squint angle.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/squint_angle_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squint_angle_estimate","text":"","code":"squint_angle_estimate(   data,   indexF,   cutoff,   structure_plane,   n = 100,   step_size = 0.01 )"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/squint_angle_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squint_angle_estimate","text":"data Input data indexF Index function cutoff Threshold index value assume structure visible structure_plane Plane defining optimal view n Number random starting planes (default = 100) step_size Interpolation step size fixing accuracy (default = 0.01)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/squint_angle_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squint_angle_estimate","text":"numeric vector containing squint angle estimates","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/squint_angle_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating squint angle of 2-d structure in high-d dataset under selected index. — squint_angle_estimate","text":"","code":"data <- spiral_data(50, 4) indexF <- scag_index(\"stringy\") cutoff <- 0.7 structure_plane <- basis_matrix(3,4,4) squint_angle_estimate(data, indexF, cutoff, structure_plane, n=1) #> [1] 0.844061"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/step_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Step along an interpolated path by fraction of path length. — step_fraction","title":"Step along an interpolated path by fraction of path length. — step_fraction","text":"Step along interpolated path fraction path length.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/step_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Step along an interpolated path by fraction of path length. — step_fraction","text":"","code":"step_fraction(interp, fraction)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/step_fraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Step along an interpolated path by fraction of path length. — step_fraction","text":"interp interpolated path fraction fraction distance start end planes","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/timeSequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Time each index evaluation for projections in the tour path. — timeSequence","title":"Time each index evaluation for projections in the tour path. — timeSequence","text":"Index evaluation timing may depend data distribution, evaluate computing time set different projections get overview distribution computing times.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/timeSequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time each index evaluation for projections in the tour path. — timeSequence","text":"","code":"timeSequence(d, t, idx, pmax)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/timeSequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time each index evaluation for projections in the tour path. — timeSequence","text":"d Input data matrix format t List projection matrices (e.g. interpolated tour path) idx Index function pmax Maximum number projections evaluate (cut t longer pmax)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/timeSequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time each index evaluation for projections in the tour path. — timeSequence","text":"numeric vector containing distances","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/timeSequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time each index evaluation for projections in the tour path. — timeSequence","text":"","code":"d <- spiralData(4, 500) t <- purrr::map(1:10, ~ tourr::basis_random(4)) idx <- scagIndex(\"stringy\") timeSequence(d, t, idx, 10) #>        t  i #> 1  0.045  1 #> 2  0.048  2 #> 3  0.047  3 #> 4  0.047  4 #> 5  0.049  5 #> 6  0.056  6 #> 7  0.049  7 #> 8  0.048  8 #> 9  0.056  9 #> 10 0.053 10"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/time_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Time each index evaluation for projections in the tour path. — time_sequence","title":"Time each index evaluation for projections in the tour path. — time_sequence","text":"Index evaluation timing may depend data distribution, evaluate computing time set different projections get overview distribution computing times.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/time_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time each index evaluation for projections in the tour path. — time_sequence","text":"","code":"time_sequence(d, t, idx, pmax)"},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/time_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time each index evaluation for projections in the tour path. — time_sequence","text":"d Input data matrix format t List projection matrices (e.g. interpolated tour path) idx Index function pmax Maximum number projections evaluate (cut t longer pmax)","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/time_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time each index evaluation for projections in the tour path. — time_sequence","text":"numeric vector containing distances","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/reference/time_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time each index evaluation for projections in the tour path. — time_sequence","text":"","code":"d <- as.matrix(spiral_data(500, 4)) t <- purrr::map(1:10, ~ tourr::basis_random(4)) idx <- scag_index(\"stringy\") time_sequence(d, t, idx, 10) #>        t  i #> 1  0.050  1 #> 2  0.047  2 #> 3  0.045  3 #> 4  0.045  4 #> 5  0.070  5 #> 6  0.045  6 #> 7  0.046  7 #> 8  0.046  8 #> 9  0.056  9 #> 10 0.049 10"},{"path":"https://uschilaa.github.io/spinebil/index.html/news/index.html","id":"version-102","dir":"Changelog","previous_headings":"","what":"Version 1.0.2","title":"Version 1.0.2","text":"Wrapped example ppi_samplesize_effect() \\donttest{} comply CRAN’s runtime policy (<5 seconds).","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/news/index.html","id":"version-101","dir":"Changelog","previous_headings":"","what":"Version 1.0.1","title":"Version 1.0.1","text":"tested examples run <10 seconds.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/news/index.html","id":"version-100","dir":"Changelog","previous_headings":"","what":"Version 1.0.0","title":"Version 1.0.0","text":"Several existing functions renamed consistency. Added multiple new functions expanding package’s functionality. Introduced Quarto vignettes demonstrate usage workflows. Added hex sticker package.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/news/index.html","id":"version-016","dir":"Changelog","previous_headings":"","what":"Version 0.1.6","title":"Version 0.1.6","text":"CRAN release: 2025-07-11 Corrected DOI formatting DESCRIPTION meet CRAN requirements.","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/news/index.html","id":"version-015","dir":"Changelog","previous_headings":"","what":"Version 0.1.5","title":"Version 0.1.5","text":"reduction code speed satisfy CRAN checks","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/news/index.html","id":"version-014","dir":"Changelog","previous_headings":"","what":"Version 0.1.4","title":"Version 0.1.4","text":"Fixes correct items reported manual CRAN check Added citation DESCRIPTION","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/news/index.html","id":"version-013","dir":"Changelog","previous_headings":"","what":"Version 0.1.3","title":"Version 0.1.3","text":"Fixed CRAN errors updated citation published paper","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/news/index.html","id":"version-012","dir":"Changelog","previous_headings":"","what":"Version 0.1.2","title":"Version 0.1.2","text":"Fixed CRAN errors removed dependency binostics","code":""},{"path":"https://uschilaa.github.io/spinebil/index.html/news/index.html","id":"version-011","dir":"Changelog","previous_headings":"","what":"Version 0.1.1","title":"Version 0.1.1","text":"Updated work new version dplyr tibble. Removed dependency mbgraphic (index functions now available tourr).","code":""}]
